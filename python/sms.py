# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _sms
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class SMSHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMSHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMSHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iSmsMagic"] = _sms.SMSHeader_iSmsMagic_set
    __swig_getmethods__["iSmsMagic"] = _sms.SMSHeader_iSmsMagic_get
    if _newclass:iSmsMagic = _swig_property(_sms.SMSHeader_iSmsMagic_get, _sms.SMSHeader_iSmsMagic_set)
    __swig_setmethods__["iHeadBSize"] = _sms.SMSHeader_iHeadBSize_set
    __swig_getmethods__["iHeadBSize"] = _sms.SMSHeader_iHeadBSize_get
    if _newclass:iHeadBSize = _swig_property(_sms.SMSHeader_iHeadBSize_get, _sms.SMSHeader_iHeadBSize_set)
    __swig_setmethods__["nRecords"] = _sms.SMSHeader_nRecords_set
    __swig_getmethods__["nRecords"] = _sms.SMSHeader_nRecords_get
    if _newclass:nRecords = _swig_property(_sms.SMSHeader_nRecords_get, _sms.SMSHeader_nRecords_set)
    __swig_setmethods__["iRecordBSize"] = _sms.SMSHeader_iRecordBSize_set
    __swig_getmethods__["iRecordBSize"] = _sms.SMSHeader_iRecordBSize_get
    if _newclass:iRecordBSize = _swig_property(_sms.SMSHeader_iRecordBSize_get, _sms.SMSHeader_iRecordBSize_set)
    __swig_setmethods__["iFormat"] = _sms.SMSHeader_iFormat_set
    __swig_getmethods__["iFormat"] = _sms.SMSHeader_iFormat_get
    if _newclass:iFormat = _swig_property(_sms.SMSHeader_iFormat_get, _sms.SMSHeader_iFormat_set)
    __swig_setmethods__["iFrameRate"] = _sms.SMSHeader_iFrameRate_set
    __swig_getmethods__["iFrameRate"] = _sms.SMSHeader_iFrameRate_get
    if _newclass:iFrameRate = _swig_property(_sms.SMSHeader_iFrameRate_get, _sms.SMSHeader_iFrameRate_set)
    __swig_setmethods__["iStochasticType"] = _sms.SMSHeader_iStochasticType_set
    __swig_getmethods__["iStochasticType"] = _sms.SMSHeader_iStochasticType_get
    if _newclass:iStochasticType = _swig_property(_sms.SMSHeader_iStochasticType_get, _sms.SMSHeader_iStochasticType_set)
    __swig_setmethods__["nTrajectories"] = _sms.SMSHeader_nTrajectories_set
    __swig_getmethods__["nTrajectories"] = _sms.SMSHeader_nTrajectories_get
    if _newclass:nTrajectories = _swig_property(_sms.SMSHeader_nTrajectories_get, _sms.SMSHeader_nTrajectories_set)
    __swig_setmethods__["nStochasticCoeff"] = _sms.SMSHeader_nStochasticCoeff_set
    __swig_getmethods__["nStochasticCoeff"] = _sms.SMSHeader_nStochasticCoeff_get
    if _newclass:nStochasticCoeff = _swig_property(_sms.SMSHeader_nStochasticCoeff_get, _sms.SMSHeader_nStochasticCoeff_set)
    __swig_setmethods__["sizeHop"] = _sms.SMSHeader_sizeHop_set
    __swig_getmethods__["sizeHop"] = _sms.SMSHeader_sizeHop_get
    if _newclass:sizeHop = _swig_property(_sms.SMSHeader_sizeHop_get, _sms.SMSHeader_sizeHop_set)
    __swig_setmethods__["fAmplitude"] = _sms.SMSHeader_fAmplitude_set
    __swig_getmethods__["fAmplitude"] = _sms.SMSHeader_fAmplitude_get
    if _newclass:fAmplitude = _swig_property(_sms.SMSHeader_fAmplitude_get, _sms.SMSHeader_fAmplitude_set)
    __swig_setmethods__["fFrequency"] = _sms.SMSHeader_fFrequency_set
    __swig_getmethods__["fFrequency"] = _sms.SMSHeader_fFrequency_get
    if _newclass:fFrequency = _swig_property(_sms.SMSHeader_fFrequency_get, _sms.SMSHeader_fFrequency_set)
    __swig_setmethods__["iOriginalSRate"] = _sms.SMSHeader_iOriginalSRate_set
    __swig_getmethods__["iOriginalSRate"] = _sms.SMSHeader_iOriginalSRate_get
    if _newclass:iOriginalSRate = _swig_property(_sms.SMSHeader_iOriginalSRate_get, _sms.SMSHeader_iOriginalSRate_set)
    __swig_setmethods__["iBegSteadyState"] = _sms.SMSHeader_iBegSteadyState_set
    __swig_getmethods__["iBegSteadyState"] = _sms.SMSHeader_iBegSteadyState_get
    if _newclass:iBegSteadyState = _swig_property(_sms.SMSHeader_iBegSteadyState_get, _sms.SMSHeader_iBegSteadyState_set)
    __swig_setmethods__["iEndSteadyState"] = _sms.SMSHeader_iEndSteadyState_set
    __swig_getmethods__["iEndSteadyState"] = _sms.SMSHeader_iEndSteadyState_get
    if _newclass:iEndSteadyState = _swig_property(_sms.SMSHeader_iEndSteadyState_get, _sms.SMSHeader_iEndSteadyState_set)
    __swig_setmethods__["fResidualPerc"] = _sms.SMSHeader_fResidualPerc_set
    __swig_getmethods__["fResidualPerc"] = _sms.SMSHeader_fResidualPerc_get
    if _newclass:fResidualPerc = _swig_property(_sms.SMSHeader_fResidualPerc_get, _sms.SMSHeader_fResidualPerc_set)
    __swig_setmethods__["nLoopRecords"] = _sms.SMSHeader_nLoopRecords_set
    __swig_getmethods__["nLoopRecords"] = _sms.SMSHeader_nLoopRecords_get
    if _newclass:nLoopRecords = _swig_property(_sms.SMSHeader_nLoopRecords_get, _sms.SMSHeader_nLoopRecords_set)
    __swig_setmethods__["nSpecEnvelopePoints"] = _sms.SMSHeader_nSpecEnvelopePoints_set
    __swig_getmethods__["nSpecEnvelopePoints"] = _sms.SMSHeader_nSpecEnvelopePoints_get
    if _newclass:nSpecEnvelopePoints = _swig_property(_sms.SMSHeader_nSpecEnvelopePoints_get, _sms.SMSHeader_nSpecEnvelopePoints_set)
    __swig_setmethods__["nTextCharacters"] = _sms.SMSHeader_nTextCharacters_set
    __swig_getmethods__["nTextCharacters"] = _sms.SMSHeader_nTextCharacters_get
    if _newclass:nTextCharacters = _swig_property(_sms.SMSHeader_nTextCharacters_get, _sms.SMSHeader_nTextCharacters_set)
    __swig_setmethods__["pILoopRecords"] = _sms.SMSHeader_pILoopRecords_set
    __swig_getmethods__["pILoopRecords"] = _sms.SMSHeader_pILoopRecords_get
    if _newclass:pILoopRecords = _swig_property(_sms.SMSHeader_pILoopRecords_get, _sms.SMSHeader_pILoopRecords_set)
    __swig_setmethods__["pFSpectralEnvelope"] = _sms.SMSHeader_pFSpectralEnvelope_set
    __swig_getmethods__["pFSpectralEnvelope"] = _sms.SMSHeader_pFSpectralEnvelope_get
    if _newclass:pFSpectralEnvelope = _swig_property(_sms.SMSHeader_pFSpectralEnvelope_get, _sms.SMSHeader_pFSpectralEnvelope_set)
    __swig_setmethods__["pChTextCharacters"] = _sms.SMSHeader_pChTextCharacters_set
    __swig_getmethods__["pChTextCharacters"] = _sms.SMSHeader_pChTextCharacters_get
    if _newclass:pChTextCharacters = _swig_property(_sms.SMSHeader_pChTextCharacters_get, _sms.SMSHeader_pChTextCharacters_set)
    def __init__(self, *args): 
        this = _sms.new_SMSHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMSHeader
    __del__ = lambda self : None;
SMSHeader_swigregister = _sms.SMSHeader_swigregister
SMSHeader_swigregister(SMSHeader)

class SNDHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNDHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SNDHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nSamples"] = _sms.SNDHeader_nSamples_set
    __swig_getmethods__["nSamples"] = _sms.SNDHeader_nSamples_get
    if _newclass:nSamples = _swig_property(_sms.SNDHeader_nSamples_get, _sms.SNDHeader_nSamples_set)
    __swig_setmethods__["iSamplingRate"] = _sms.SNDHeader_iSamplingRate_set
    __swig_getmethods__["iSamplingRate"] = _sms.SNDHeader_iSamplingRate_get
    if _newclass:iSamplingRate = _swig_property(_sms.SNDHeader_iSamplingRate_get, _sms.SNDHeader_iSamplingRate_set)
    __swig_setmethods__["channelCount"] = _sms.SNDHeader_channelCount_set
    __swig_getmethods__["channelCount"] = _sms.SNDHeader_channelCount_get
    if _newclass:channelCount = _swig_property(_sms.SNDHeader_channelCount_get, _sms.SNDHeader_channelCount_set)
    __swig_setmethods__["sizeHeader"] = _sms.SNDHeader_sizeHeader_set
    __swig_getmethods__["sizeHeader"] = _sms.SNDHeader_sizeHeader_get
    if _newclass:sizeHeader = _swig_property(_sms.SNDHeader_sizeHeader_get, _sms.SNDHeader_sizeHeader_set)
    def __init__(self, *args): 
        this = _sms.new_SNDHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SNDHeader
    __del__ = lambda self : None;
SNDHeader_swigregister = _sms.SNDHeader_swigregister
SNDHeader_swigregister(SNDHeader)

SMS_MAGIC = _sms.SMS_MAGIC
FORMAT_HARMONIC = _sms.FORMAT_HARMONIC
FORMAT_INHARMONIC = _sms.FORMAT_INHARMONIC
FORMAT_HARMONIC_WITH_PHASE = _sms.FORMAT_HARMONIC_WITH_PHASE
FORMAT_INHARMONIC_WITH_PHASE = _sms.FORMAT_INHARMONIC_WITH_PHASE
STOC_AUDIO = _sms.STOC_AUDIO
STOC_STFT = _sms.STOC_STFT
STOC_APPROX = _sms.STOC_APPROX
STOC_NONE = _sms.STOC_NONE
class SMS_DATA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_DATA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_DATA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pSmsData"] = _sms.SMS_DATA_pSmsData_set
    __swig_getmethods__["pSmsData"] = _sms.SMS_DATA_pSmsData_get
    if _newclass:pSmsData = _swig_property(_sms.SMS_DATA_pSmsData_get, _sms.SMS_DATA_pSmsData_set)
    __swig_setmethods__["sizeData"] = _sms.SMS_DATA_sizeData_set
    __swig_getmethods__["sizeData"] = _sms.SMS_DATA_sizeData_get
    if _newclass:sizeData = _swig_property(_sms.SMS_DATA_sizeData_get, _sms.SMS_DATA_sizeData_set)
    __swig_setmethods__["pFFreqTraj"] = _sms.SMS_DATA_pFFreqTraj_set
    __swig_getmethods__["pFFreqTraj"] = _sms.SMS_DATA_pFFreqTraj_get
    if _newclass:pFFreqTraj = _swig_property(_sms.SMS_DATA_pFFreqTraj_get, _sms.SMS_DATA_pFFreqTraj_set)
    __swig_setmethods__["pFMagTraj"] = _sms.SMS_DATA_pFMagTraj_set
    __swig_getmethods__["pFMagTraj"] = _sms.SMS_DATA_pFMagTraj_get
    if _newclass:pFMagTraj = _swig_property(_sms.SMS_DATA_pFMagTraj_get, _sms.SMS_DATA_pFMagTraj_set)
    __swig_setmethods__["pFPhaTraj"] = _sms.SMS_DATA_pFPhaTraj_set
    __swig_getmethods__["pFPhaTraj"] = _sms.SMS_DATA_pFPhaTraj_get
    if _newclass:pFPhaTraj = _swig_property(_sms.SMS_DATA_pFPhaTraj_get, _sms.SMS_DATA_pFPhaTraj_set)
    __swig_setmethods__["nTraj"] = _sms.SMS_DATA_nTraj_set
    __swig_getmethods__["nTraj"] = _sms.SMS_DATA_nTraj_get
    if _newclass:nTraj = _swig_property(_sms.SMS_DATA_nTraj_get, _sms.SMS_DATA_nTraj_set)
    __swig_setmethods__["pFStocAudio"] = _sms.SMS_DATA_pFStocAudio_set
    __swig_getmethods__["pFStocAudio"] = _sms.SMS_DATA_pFStocAudio_get
    if _newclass:pFStocAudio = _swig_property(_sms.SMS_DATA_pFStocAudio_get, _sms.SMS_DATA_pFStocAudio_set)
    __swig_setmethods__["pFStocGain"] = _sms.SMS_DATA_pFStocGain_set
    __swig_getmethods__["pFStocGain"] = _sms.SMS_DATA_pFStocGain_get
    if _newclass:pFStocGain = _swig_property(_sms.SMS_DATA_pFStocGain_get, _sms.SMS_DATA_pFStocGain_set)
    __swig_setmethods__["pFStocCoeff"] = _sms.SMS_DATA_pFStocCoeff_set
    __swig_getmethods__["pFStocCoeff"] = _sms.SMS_DATA_pFStocCoeff_get
    if _newclass:pFStocCoeff = _swig_property(_sms.SMS_DATA_pFStocCoeff_get, _sms.SMS_DATA_pFStocCoeff_set)
    __swig_setmethods__["nCoeff"] = _sms.SMS_DATA_nCoeff_set
    __swig_getmethods__["nCoeff"] = _sms.SMS_DATA_nCoeff_get
    if _newclass:nCoeff = _swig_property(_sms.SMS_DATA_nCoeff_get, _sms.SMS_DATA_nCoeff_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_DATA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_DATA
    __del__ = lambda self : None;
SMS_DATA_swigregister = _sms.SMS_DATA_swigregister
SMS_DATA_swigregister(SMS_DATA)

SMS_OK = _sms.SMS_OK
SMS_NOPEN = _sms.SMS_NOPEN
SMS_NSMS = _sms.SMS_NSMS
SMS_MALLOC = _sms.SMS_MALLOC
SMS_RDERR = _sms.SMS_RDERR
SMS_WRERR = _sms.SMS_WRERR
DEBUG_INIT = _sms.DEBUG_INIT
DEBUG_PEAK_DET = _sms.DEBUG_PEAK_DET
DEBUG_HARM_DET = _sms.DEBUG_HARM_DET
DEBUG_PEAK_CONT = _sms.DEBUG_PEAK_CONT
DEBUG_CLEAN_TRAJ = _sms.DEBUG_CLEAN_TRAJ
DEBUG_SINE_SYNTH = _sms.DEBUG_SINE_SYNTH
DEBUG_STOC_ANAL = _sms.DEBUG_STOC_ANAL
DEBUG_STOC_SYNTH = _sms.DEBUG_STOC_SYNTH
DEBUG_SMS_ANAL = _sms.DEBUG_SMS_ANAL
DEBUG_ALL = _sms.DEBUG_ALL
DEBUG_RESIDUAL = _sms.DEBUG_RESIDUAL
DEBUG_SYNC = _sms.DEBUG_SYNC
TWO_PI = _sms.TWO_PI
PI = _sms.PI
PI_2 = _sms.PI_2
HALF_MAX = _sms.HALF_MAX
LOG2 = _sms.LOG2
EMPHASIS_COEFF = _sms.EMPHASIS_COEFF
MAX_BUFF = _sms.MAX_BUFF
ENV_THRESHOLD = _sms.ENV_THRESHOLD
WINDOWS_IN_FFT = _sms.WINDOWS_IN_FFT
MAX_SIZE_WINDOW = _sms.MAX_SIZE_WINDOW
MAX_SIZE_MAG = _sms.MAX_SIZE_MAG
class PEAK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PEAK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PEAK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fFreq"] = _sms.PEAK_fFreq_set
    __swig_getmethods__["fFreq"] = _sms.PEAK_fFreq_get
    if _newclass:fFreq = _swig_property(_sms.PEAK_fFreq_get, _sms.PEAK_fFreq_set)
    __swig_setmethods__["fMag"] = _sms.PEAK_fMag_set
    __swig_getmethods__["fMag"] = _sms.PEAK_fMag_get
    if _newclass:fMag = _swig_property(_sms.PEAK_fMag_get, _sms.PEAK_fMag_set)
    __swig_setmethods__["fPhase"] = _sms.PEAK_fPhase_set
    __swig_getmethods__["fPhase"] = _sms.PEAK_fPhase_get
    if _newclass:fPhase = _swig_property(_sms.PEAK_fPhase_get, _sms.PEAK_fPhase_set)
    def __init__(self, *args): 
        this = _sms.new_PEAK(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_PEAK
    __del__ = lambda self : None;
PEAK_swigregister = _sms.PEAK_swigregister
PEAK_swigregister(PEAK)

MAG_THRESHOLD = _sms.MAG_THRESHOLD
MAX_NUM_PEAKS = _sms.MAX_NUM_PEAKS
class HARM_CANDIDATE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HARM_CANDIDATE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HARM_CANDIDATE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fFreq"] = _sms.HARM_CANDIDATE_fFreq_set
    __swig_getmethods__["fFreq"] = _sms.HARM_CANDIDATE_fFreq_get
    if _newclass:fFreq = _swig_property(_sms.HARM_CANDIDATE_fFreq_get, _sms.HARM_CANDIDATE_fFreq_set)
    __swig_setmethods__["fMag"] = _sms.HARM_CANDIDATE_fMag_set
    __swig_getmethods__["fMag"] = _sms.HARM_CANDIDATE_fMag_get
    if _newclass:fMag = _swig_property(_sms.HARM_CANDIDATE_fMag_get, _sms.HARM_CANDIDATE_fMag_set)
    __swig_setmethods__["fMagPerc"] = _sms.HARM_CANDIDATE_fMagPerc_set
    __swig_getmethods__["fMagPerc"] = _sms.HARM_CANDIDATE_fMagPerc_get
    if _newclass:fMagPerc = _swig_property(_sms.HARM_CANDIDATE_fMagPerc_get, _sms.HARM_CANDIDATE_fMagPerc_set)
    __swig_setmethods__["fFreqDev"] = _sms.HARM_CANDIDATE_fFreqDev_set
    __swig_getmethods__["fFreqDev"] = _sms.HARM_CANDIDATE_fFreqDev_get
    if _newclass:fFreqDev = _swig_property(_sms.HARM_CANDIDATE_fFreqDev_get, _sms.HARM_CANDIDATE_fFreqDev_set)
    __swig_setmethods__["fHarmRatio"] = _sms.HARM_CANDIDATE_fHarmRatio_set
    __swig_getmethods__["fHarmRatio"] = _sms.HARM_CANDIDATE_fHarmRatio_get
    if _newclass:fHarmRatio = _swig_property(_sms.HARM_CANDIDATE_fHarmRatio_get, _sms.HARM_CANDIDATE_fHarmRatio_set)
    def __init__(self, *args): 
        this = _sms.new_HARM_CANDIDATE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_HARM_CANDIDATE
    __del__ = lambda self : None;
HARM_CANDIDATE_swigregister = _sms.HARM_CANDIDATE_swigregister
HARM_CANDIDATE_swigregister(HARM_CANDIDATE)

N_FUND_HARM = _sms.N_FUND_HARM
N_HARM_PEAKS = _sms.N_HARM_PEAKS
FREQ_DEV_THRES = _sms.FREQ_DEV_THRES
MAG_PERC_THRES = _sms.MAG_PERC_THRES
HARM_RATIO_THRES = _sms.HARM_RATIO_THRES
TYPE_MELODY = _sms.TYPE_MELODY
TYPE_SINGLE_NOTE = _sms.TYPE_SINGLE_NOTE
DIRECT = _sms.DIRECT
REVERSE = _sms.REVERSE
HAMMING = _sms.HAMMING
BLACKMAN_HARRIS_62 = _sms.BLACKMAN_HARRIS_62
BLACKMAN_HARRIS_70 = _sms.BLACKMAN_HARRIS_70
BLACKMAN_HARRIS_74 = _sms.BLACKMAN_HARRIS_74
BLACKMAN_HARRIS_92 = _sms.BLACKMAN_HARRIS_92
BEGINNING = _sms.BEGINNING
DEAD = _sms.DEAD
ACTIVE = _sms.ACTIVE
class GUIDE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GUIDE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GUIDE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fFreq"] = _sms.GUIDE_fFreq_set
    __swig_getmethods__["fFreq"] = _sms.GUIDE_fFreq_get
    if _newclass:fFreq = _swig_property(_sms.GUIDE_fFreq_get, _sms.GUIDE_fFreq_set)
    __swig_setmethods__["fMag"] = _sms.GUIDE_fMag_set
    __swig_getmethods__["fMag"] = _sms.GUIDE_fMag_get
    if _newclass:fMag = _swig_property(_sms.GUIDE_fMag_get, _sms.GUIDE_fMag_set)
    __swig_setmethods__["iStatus"] = _sms.GUIDE_iStatus_set
    __swig_getmethods__["iStatus"] = _sms.GUIDE_iStatus_get
    if _newclass:iStatus = _swig_property(_sms.GUIDE_iStatus_get, _sms.GUIDE_iStatus_set)
    __swig_setmethods__["iPeakChosen"] = _sms.GUIDE_iPeakChosen_set
    __swig_getmethods__["iPeakChosen"] = _sms.GUIDE_iPeakChosen_get
    if _newclass:iPeakChosen = _swig_property(_sms.GUIDE_iPeakChosen_get, _sms.GUIDE_iPeakChosen_set)
    def __init__(self, *args): 
        this = _sms.new_GUIDE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_GUIDE
    __del__ = lambda self : None;
GUIDE_swigregister = _sms.GUIDE_swigregister
GUIDE_swigregister(GUIDE)

class CONT_CANDIDATE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CONT_CANDIDATE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CONT_CANDIDATE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fFreqDev"] = _sms.CONT_CANDIDATE_fFreqDev_set
    __swig_getmethods__["fFreqDev"] = _sms.CONT_CANDIDATE_fFreqDev_get
    if _newclass:fFreqDev = _swig_property(_sms.CONT_CANDIDATE_fFreqDev_get, _sms.CONT_CANDIDATE_fFreqDev_set)
    __swig_setmethods__["fMagDev"] = _sms.CONT_CANDIDATE_fMagDev_set
    __swig_getmethods__["fMagDev"] = _sms.CONT_CANDIDATE_fMagDev_get
    if _newclass:fMagDev = _swig_property(_sms.CONT_CANDIDATE_fMagDev_get, _sms.CONT_CANDIDATE_fMagDev_set)
    __swig_setmethods__["iPeak"] = _sms.CONT_CANDIDATE_iPeak_set
    __swig_getmethods__["iPeak"] = _sms.CONT_CANDIDATE_iPeak_get
    if _newclass:iPeak = _swig_property(_sms.CONT_CANDIDATE_iPeak_get, _sms.CONT_CANDIDATE_iPeak_set)
    def __init__(self, *args): 
        this = _sms.new_CONT_CANDIDATE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_CONT_CANDIDATE
    __del__ = lambda self : None;
CONT_CANDIDATE_swigregister = _sms.CONT_CANDIDATE_swigregister
CONT_CANDIDATE_swigregister(CONT_CANDIDATE)

MAX_CONT_CANDIDATES = _sms.MAX_CONT_CANDIDATES
MIN_GOOD_FRAMES = _sms.MIN_GOOD_FRAMES
MAX_DEVIATION = _sms.MAX_DEVIATION
ANAL_DELAY = _sms.ANAL_DELAY
DELAY_FRAMES = _sms.DELAY_FRAMES
class ANAL_PARAMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ANAL_PARAMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ANAL_PARAMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iDebugMode"] = _sms.ANAL_PARAMS_iDebugMode_set
    __swig_getmethods__["iDebugMode"] = _sms.ANAL_PARAMS_iDebugMode_get
    if _newclass:iDebugMode = _swig_property(_sms.ANAL_PARAMS_iDebugMode_get, _sms.ANAL_PARAMS_iDebugMode_set)
    __swig_setmethods__["iFormat"] = _sms.ANAL_PARAMS_iFormat_set
    __swig_getmethods__["iFormat"] = _sms.ANAL_PARAMS_iFormat_get
    if _newclass:iFormat = _swig_property(_sms.ANAL_PARAMS_iFormat_get, _sms.ANAL_PARAMS_iFormat_set)
    __swig_setmethods__["iStochasticType"] = _sms.ANAL_PARAMS_iStochasticType_set
    __swig_getmethods__["iStochasticType"] = _sms.ANAL_PARAMS_iStochasticType_get
    if _newclass:iStochasticType = _swig_property(_sms.ANAL_PARAMS_iStochasticType_get, _sms.ANAL_PARAMS_iStochasticType_set)
    __swig_setmethods__["fLowestFundamental"] = _sms.ANAL_PARAMS_fLowestFundamental_set
    __swig_getmethods__["fLowestFundamental"] = _sms.ANAL_PARAMS_fLowestFundamental_get
    if _newclass:fLowestFundamental = _swig_property(_sms.ANAL_PARAMS_fLowestFundamental_get, _sms.ANAL_PARAMS_fLowestFundamental_set)
    __swig_setmethods__["fHighestFundamental"] = _sms.ANAL_PARAMS_fHighestFundamental_set
    __swig_getmethods__["fHighestFundamental"] = _sms.ANAL_PARAMS_fHighestFundamental_get
    if _newclass:fHighestFundamental = _swig_property(_sms.ANAL_PARAMS_fHighestFundamental_get, _sms.ANAL_PARAMS_fHighestFundamental_set)
    __swig_setmethods__["fDefaultFundamental"] = _sms.ANAL_PARAMS_fDefaultFundamental_set
    __swig_getmethods__["fDefaultFundamental"] = _sms.ANAL_PARAMS_fDefaultFundamental_get
    if _newclass:fDefaultFundamental = _swig_property(_sms.ANAL_PARAMS_fDefaultFundamental_get, _sms.ANAL_PARAMS_fDefaultFundamental_set)
    __swig_setmethods__["fPeakContToGuide"] = _sms.ANAL_PARAMS_fPeakContToGuide_set
    __swig_getmethods__["fPeakContToGuide"] = _sms.ANAL_PARAMS_fPeakContToGuide_get
    if _newclass:fPeakContToGuide = _swig_property(_sms.ANAL_PARAMS_fPeakContToGuide_get, _sms.ANAL_PARAMS_fPeakContToGuide_set)
    __swig_setmethods__["fFundContToGuide"] = _sms.ANAL_PARAMS_fFundContToGuide_set
    __swig_getmethods__["fFundContToGuide"] = _sms.ANAL_PARAMS_fFundContToGuide_get
    if _newclass:fFundContToGuide = _swig_property(_sms.ANAL_PARAMS_fFundContToGuide_get, _sms.ANAL_PARAMS_fFundContToGuide_set)
    __swig_setmethods__["fFreqDeviation"] = _sms.ANAL_PARAMS_fFreqDeviation_set
    __swig_getmethods__["fFreqDeviation"] = _sms.ANAL_PARAMS_fFreqDeviation_get
    if _newclass:fFreqDeviation = _swig_property(_sms.ANAL_PARAMS_fFreqDeviation_get, _sms.ANAL_PARAMS_fFreqDeviation_set)
    __swig_setmethods__["iSamplingRate"] = _sms.ANAL_PARAMS_iSamplingRate_set
    __swig_getmethods__["iSamplingRate"] = _sms.ANAL_PARAMS_iSamplingRate_get
    if _newclass:iSamplingRate = _swig_property(_sms.ANAL_PARAMS_iSamplingRate_get, _sms.ANAL_PARAMS_iSamplingRate_set)
    __swig_setmethods__["iDefaultSizeWindow"] = _sms.ANAL_PARAMS_iDefaultSizeWindow_set
    __swig_getmethods__["iDefaultSizeWindow"] = _sms.ANAL_PARAMS_iDefaultSizeWindow_get
    if _newclass:iDefaultSizeWindow = _swig_property(_sms.ANAL_PARAMS_iDefaultSizeWindow_get, _sms.ANAL_PARAMS_iDefaultSizeWindow_set)
    __swig_setmethods__["sizeHop"] = _sms.ANAL_PARAMS_sizeHop_set
    __swig_getmethods__["sizeHop"] = _sms.ANAL_PARAMS_sizeHop_get
    if _newclass:sizeHop = _swig_property(_sms.ANAL_PARAMS_sizeHop_get, _sms.ANAL_PARAMS_sizeHop_set)
    __swig_setmethods__["fSizeWindow"] = _sms.ANAL_PARAMS_fSizeWindow_set
    __swig_getmethods__["fSizeWindow"] = _sms.ANAL_PARAMS_fSizeWindow_get
    if _newclass:fSizeWindow = _swig_property(_sms.ANAL_PARAMS_fSizeWindow_get, _sms.ANAL_PARAMS_fSizeWindow_set)
    __swig_setmethods__["nGuides"] = _sms.ANAL_PARAMS_nGuides_set
    __swig_getmethods__["nGuides"] = _sms.ANAL_PARAMS_nGuides_get
    if _newclass:nGuides = _swig_property(_sms.ANAL_PARAMS_nGuides_get, _sms.ANAL_PARAMS_nGuides_set)
    __swig_setmethods__["iCleanTraj"] = _sms.ANAL_PARAMS_iCleanTraj_set
    __swig_getmethods__["iCleanTraj"] = _sms.ANAL_PARAMS_iCleanTraj_get
    if _newclass:iCleanTraj = _swig_property(_sms.ANAL_PARAMS_iCleanTraj_get, _sms.ANAL_PARAMS_iCleanTraj_set)
    __swig_setmethods__["fMinRefHarmMag"] = _sms.ANAL_PARAMS_fMinRefHarmMag_set
    __swig_getmethods__["fMinRefHarmMag"] = _sms.ANAL_PARAMS_fMinRefHarmMag_get
    if _newclass:fMinRefHarmMag = _swig_property(_sms.ANAL_PARAMS_fMinRefHarmMag_get, _sms.ANAL_PARAMS_fMinRefHarmMag_set)
    __swig_setmethods__["fRefHarmMagDiffFromMax"] = _sms.ANAL_PARAMS_fRefHarmMagDiffFromMax_set
    __swig_getmethods__["fRefHarmMagDiffFromMax"] = _sms.ANAL_PARAMS_fRefHarmMagDiffFromMax_get
    if _newclass:fRefHarmMagDiffFromMax = _swig_property(_sms.ANAL_PARAMS_fRefHarmMagDiffFromMax_get, _sms.ANAL_PARAMS_fRefHarmMagDiffFromMax_set)
    __swig_setmethods__["iRefHarmonic"] = _sms.ANAL_PARAMS_iRefHarmonic_set
    __swig_getmethods__["iRefHarmonic"] = _sms.ANAL_PARAMS_iRefHarmonic_get
    if _newclass:iRefHarmonic = _swig_property(_sms.ANAL_PARAMS_iRefHarmonic_get, _sms.ANAL_PARAMS_iRefHarmonic_set)
    __swig_setmethods__["iMinTrajLength"] = _sms.ANAL_PARAMS_iMinTrajLength_set
    __swig_getmethods__["iMinTrajLength"] = _sms.ANAL_PARAMS_iMinTrajLength_get
    if _newclass:iMinTrajLength = _swig_property(_sms.ANAL_PARAMS_iMinTrajLength_get, _sms.ANAL_PARAMS_iMinTrajLength_set)
    __swig_setmethods__["iMaxSleepingTime"] = _sms.ANAL_PARAMS_iMaxSleepingTime_set
    __swig_getmethods__["iMaxSleepingTime"] = _sms.ANAL_PARAMS_iMaxSleepingTime_get
    if _newclass:iMaxSleepingTime = _swig_property(_sms.ANAL_PARAMS_iMaxSleepingTime_get, _sms.ANAL_PARAMS_iMaxSleepingTime_set)
    __swig_setmethods__["fHighestFreq"] = _sms.ANAL_PARAMS_fHighestFreq_set
    __swig_getmethods__["fHighestFreq"] = _sms.ANAL_PARAMS_fHighestFreq_get
    if _newclass:fHighestFreq = _swig_property(_sms.ANAL_PARAMS_fHighestFreq_get, _sms.ANAL_PARAMS_fHighestFreq_set)
    __swig_setmethods__["fMinPeakMag"] = _sms.ANAL_PARAMS_fMinPeakMag_set
    __swig_getmethods__["fMinPeakMag"] = _sms.ANAL_PARAMS_fMinPeakMag_get
    if _newclass:fMinPeakMag = _swig_property(_sms.ANAL_PARAMS_fMinPeakMag_get, _sms.ANAL_PARAMS_fMinPeakMag_set)
    __swig_setmethods__["iSoundType"] = _sms.ANAL_PARAMS_iSoundType_set
    __swig_getmethods__["iSoundType"] = _sms.ANAL_PARAMS_iSoundType_get
    if _newclass:iSoundType = _swig_property(_sms.ANAL_PARAMS_iSoundType_get, _sms.ANAL_PARAMS_iSoundType_set)
    __swig_setmethods__["iAnalysisDirection"] = _sms.ANAL_PARAMS_iAnalysisDirection_set
    __swig_getmethods__["iAnalysisDirection"] = _sms.ANAL_PARAMS_iAnalysisDirection_get
    if _newclass:iAnalysisDirection = _swig_property(_sms.ANAL_PARAMS_iAnalysisDirection_get, _sms.ANAL_PARAMS_iAnalysisDirection_set)
    __swig_setmethods__["iSizeSound"] = _sms.ANAL_PARAMS_iSizeSound_set
    __swig_getmethods__["iSizeSound"] = _sms.ANAL_PARAMS_iSizeSound_get
    if _newclass:iSizeSound = _swig_property(_sms.ANAL_PARAMS_iSizeSound_get, _sms.ANAL_PARAMS_iSizeSound_set)
    __swig_setmethods__["iWindowType"] = _sms.ANAL_PARAMS_iWindowType_set
    __swig_getmethods__["iWindowType"] = _sms.ANAL_PARAMS_iWindowType_get
    if _newclass:iWindowType = _swig_property(_sms.ANAL_PARAMS_iWindowType_get, _sms.ANAL_PARAMS_iWindowType_set)
    def __init__(self, *args): 
        this = _sms.new_ANAL_PARAMS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_ANAL_PARAMS
    __del__ = lambda self : None;
ANAL_PARAMS_swigregister = _sms.ANAL_PARAMS_swigregister
ANAL_PARAMS_swigregister(ANAL_PARAMS)

class SYNTH_PARAMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SYNTH_PARAMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SYNTH_PARAMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iStochasticType"] = _sms.SYNTH_PARAMS_iStochasticType_set
    __swig_getmethods__["iStochasticType"] = _sms.SYNTH_PARAMS_iStochasticType_get
    if _newclass:iStochasticType = _swig_property(_sms.SYNTH_PARAMS_iStochasticType_get, _sms.SYNTH_PARAMS_iStochasticType_set)
    __swig_setmethods__["iSynthesisType"] = _sms.SYNTH_PARAMS_iSynthesisType_set
    __swig_getmethods__["iSynthesisType"] = _sms.SYNTH_PARAMS_iSynthesisType_get
    if _newclass:iSynthesisType = _swig_property(_sms.SYNTH_PARAMS_iSynthesisType_get, _sms.SYNTH_PARAMS_iSynthesisType_set)
    __swig_setmethods__["iOriginalSRate"] = _sms.SYNTH_PARAMS_iOriginalSRate_set
    __swig_getmethods__["iOriginalSRate"] = _sms.SYNTH_PARAMS_iOriginalSRate_get
    if _newclass:iOriginalSRate = _swig_property(_sms.SYNTH_PARAMS_iOriginalSRate_get, _sms.SYNTH_PARAMS_iOriginalSRate_set)
    __swig_setmethods__["iSamplingRate"] = _sms.SYNTH_PARAMS_iSamplingRate_set
    __swig_getmethods__["iSamplingRate"] = _sms.SYNTH_PARAMS_iSamplingRate_get
    if _newclass:iSamplingRate = _swig_property(_sms.SYNTH_PARAMS_iSamplingRate_get, _sms.SYNTH_PARAMS_iSamplingRate_set)
    __swig_setmethods__["previousFrame"] = _sms.SYNTH_PARAMS_previousFrame_set
    __swig_getmethods__["previousFrame"] = _sms.SYNTH_PARAMS_previousFrame_get
    if _newclass:previousFrame = _swig_property(_sms.SYNTH_PARAMS_previousFrame_get, _sms.SYNTH_PARAMS_previousFrame_set)
    __swig_setmethods__["sizeHop"] = _sms.SYNTH_PARAMS_sizeHop_set
    __swig_getmethods__["sizeHop"] = _sms.SYNTH_PARAMS_sizeHop_get
    if _newclass:sizeHop = _swig_property(_sms.SYNTH_PARAMS_sizeHop_get, _sms.SYNTH_PARAMS_sizeHop_set)
    __swig_setmethods__["origSizeHop"] = _sms.SYNTH_PARAMS_origSizeHop_set
    __swig_getmethods__["origSizeHop"] = _sms.SYNTH_PARAMS_origSizeHop_get
    if _newclass:origSizeHop = _swig_property(_sms.SYNTH_PARAMS_origSizeHop_get, _sms.SYNTH_PARAMS_origSizeHop_set)
    __swig_setmethods__["pFDetWindow"] = _sms.SYNTH_PARAMS_pFDetWindow_set
    __swig_getmethods__["pFDetWindow"] = _sms.SYNTH_PARAMS_pFDetWindow_get
    if _newclass:pFDetWindow = _swig_property(_sms.SYNTH_PARAMS_pFDetWindow_get, _sms.SYNTH_PARAMS_pFDetWindow_set)
    __swig_setmethods__["pFStocWindow"] = _sms.SYNTH_PARAMS_pFStocWindow_set
    __swig_getmethods__["pFStocWindow"] = _sms.SYNTH_PARAMS_pFStocWindow_get
    if _newclass:pFStocWindow = _swig_property(_sms.SYNTH_PARAMS_pFStocWindow_get, _sms.SYNTH_PARAMS_pFStocWindow_set)
    def __init__(self, *args): 
        this = _sms.new_SYNTH_PARAMS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SYNTH_PARAMS
    __del__ = lambda self : None;
SYNTH_PARAMS_swigregister = _sms.SYNTH_PARAMS_swigregister
SYNTH_PARAMS_swigregister(SYNTH_PARAMS)

SIZE_SYNTH_FRAME = _sms.SIZE_SYNTH_FRAME
class SOUND_BUFFER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SOUND_BUFFER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SOUND_BUFFER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iSoundSample"] = _sms.SOUND_BUFFER_iSoundSample_set
    __swig_getmethods__["iSoundSample"] = _sms.SOUND_BUFFER_iSoundSample_get
    if _newclass:iSoundSample = _swig_property(_sms.SOUND_BUFFER_iSoundSample_get, _sms.SOUND_BUFFER_iSoundSample_set)
    __swig_setmethods__["pFBuffer"] = _sms.SOUND_BUFFER_pFBuffer_set
    __swig_getmethods__["pFBuffer"] = _sms.SOUND_BUFFER_pFBuffer_get
    if _newclass:pFBuffer = _swig_property(_sms.SOUND_BUFFER_pFBuffer_get, _sms.SOUND_BUFFER_pFBuffer_set)
    __swig_setmethods__["sizeBuffer"] = _sms.SOUND_BUFFER_sizeBuffer_set
    __swig_getmethods__["sizeBuffer"] = _sms.SOUND_BUFFER_sizeBuffer_get
    if _newclass:sizeBuffer = _swig_property(_sms.SOUND_BUFFER_sizeBuffer_get, _sms.SOUND_BUFFER_sizeBuffer_set)
    __swig_setmethods__["iFirstSample"] = _sms.SOUND_BUFFER_iFirstSample_set
    __swig_getmethods__["iFirstSample"] = _sms.SOUND_BUFFER_iFirstSample_get
    if _newclass:iFirstSample = _swig_property(_sms.SOUND_BUFFER_iFirstSample_get, _sms.SOUND_BUFFER_iFirstSample_set)
    def __init__(self, *args): 
        this = _sms.new_SOUND_BUFFER(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SOUND_BUFFER
    __del__ = lambda self : None;
SOUND_BUFFER_swigregister = _sms.SOUND_BUFFER_swigregister
SOUND_BUFFER_swigregister(SOUND_BUFFER)

EMPTY = _sms.EMPTY
READY = _sms.READY
PEAKS_FOUND = _sms.PEAKS_FOUND
FUND_FOUND = _sms.FUND_FOUND
TRAJ_FOUND = _sms.TRAJ_FOUND
CLEANED = _sms.CLEANED
RECOMPUTED = _sms.RECOMPUTED
DETER_SYNTH = _sms.DETER_SYNTH
STOC_COMPUTED = _sms.STOC_COMPUTED
DONE = _sms.DONE
END = _sms.END
class ANAL_FRAME(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ANAL_FRAME, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ANAL_FRAME, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iFrameSample"] = _sms.ANAL_FRAME_iFrameSample_set
    __swig_getmethods__["iFrameSample"] = _sms.ANAL_FRAME_iFrameSample_get
    if _newclass:iFrameSample = _swig_property(_sms.ANAL_FRAME_iFrameSample_get, _sms.ANAL_FRAME_iFrameSample_set)
    __swig_setmethods__["iFrameSize"] = _sms.ANAL_FRAME_iFrameSize_set
    __swig_getmethods__["iFrameSize"] = _sms.ANAL_FRAME_iFrameSize_get
    if _newclass:iFrameSize = _swig_property(_sms.ANAL_FRAME_iFrameSize_get, _sms.ANAL_FRAME_iFrameSize_set)
    __swig_setmethods__["iFrameNum"] = _sms.ANAL_FRAME_iFrameNum_set
    __swig_getmethods__["iFrameNum"] = _sms.ANAL_FRAME_iFrameNum_get
    if _newclass:iFrameNum = _swig_property(_sms.ANAL_FRAME_iFrameNum_get, _sms.ANAL_FRAME_iFrameNum_set)
    __swig_setmethods__["pSpectralPeaks"] = _sms.ANAL_FRAME_pSpectralPeaks_set
    __swig_getmethods__["pSpectralPeaks"] = _sms.ANAL_FRAME_pSpectralPeaks_get
    if _newclass:pSpectralPeaks = _swig_property(_sms.ANAL_FRAME_pSpectralPeaks_get, _sms.ANAL_FRAME_pSpectralPeaks_set)
    __swig_setmethods__["nPeaks"] = _sms.ANAL_FRAME_nPeaks_set
    __swig_getmethods__["nPeaks"] = _sms.ANAL_FRAME_nPeaks_get
    if _newclass:nPeaks = _swig_property(_sms.ANAL_FRAME_nPeaks_get, _sms.ANAL_FRAME_nPeaks_set)
    __swig_setmethods__["fFundamental"] = _sms.ANAL_FRAME_fFundamental_set
    __swig_getmethods__["fFundamental"] = _sms.ANAL_FRAME_fFundamental_get
    if _newclass:fFundamental = _swig_property(_sms.ANAL_FRAME_fFundamental_get, _sms.ANAL_FRAME_fFundamental_set)
    __swig_setmethods__["deterministic"] = _sms.ANAL_FRAME_deterministic_set
    __swig_getmethods__["deterministic"] = _sms.ANAL_FRAME_deterministic_get
    if _newclass:deterministic = _swig_property(_sms.ANAL_FRAME_deterministic_get, _sms.ANAL_FRAME_deterministic_set)
    __swig_setmethods__["iStatus"] = _sms.ANAL_FRAME_iStatus_set
    __swig_getmethods__["iStatus"] = _sms.ANAL_FRAME_iStatus_get
    if _newclass:iStatus = _swig_property(_sms.ANAL_FRAME_iStatus_get, _sms.ANAL_FRAME_iStatus_set)
    def __init__(self, *args): 
        this = _sms.new_ANAL_FRAME(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_ANAL_FRAME
    __del__ = lambda self : None;
ANAL_FRAME_swigregister = _sms.ANAL_FRAME_swigregister
ANAL_FRAME_swigregister(ANAL_FRAME)

class HYB_PARAMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HYB_PARAMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HYB_PARAMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nCoefficients"] = _sms.HYB_PARAMS_nCoefficients_set
    __swig_getmethods__["nCoefficients"] = _sms.HYB_PARAMS_nCoefficients_get
    if _newclass:nCoefficients = _swig_property(_sms.HYB_PARAMS_nCoefficients_get, _sms.HYB_PARAMS_nCoefficients_set)
    __swig_setmethods__["fGain"] = _sms.HYB_PARAMS_fGain_set
    __swig_getmethods__["fGain"] = _sms.HYB_PARAMS_fGain_get
    if _newclass:fGain = _swig_property(_sms.HYB_PARAMS_fGain_get, _sms.HYB_PARAMS_fGain_set)
    __swig_setmethods__["fMagBalance"] = _sms.HYB_PARAMS_fMagBalance_set
    __swig_getmethods__["fMagBalance"] = _sms.HYB_PARAMS_fMagBalance_get
    if _newclass:fMagBalance = _swig_property(_sms.HYB_PARAMS_fMagBalance_get, _sms.HYB_PARAMS_fMagBalance_set)
    __swig_setmethods__["iSmoothOrder"] = _sms.HYB_PARAMS_iSmoothOrder_set
    __swig_getmethods__["iSmoothOrder"] = _sms.HYB_PARAMS_iSmoothOrder_get
    if _newclass:iSmoothOrder = _swig_property(_sms.HYB_PARAMS_iSmoothOrder_get, _sms.HYB_PARAMS_iSmoothOrder_set)
    __swig_setmethods__["pCompressionEnv"] = _sms.HYB_PARAMS_pCompressionEnv_set
    __swig_getmethods__["pCompressionEnv"] = _sms.HYB_PARAMS_pCompressionEnv_get
    if _newclass:pCompressionEnv = _swig_property(_sms.HYB_PARAMS_pCompressionEnv_get, _sms.HYB_PARAMS_pCompressionEnv_set)
    __swig_setmethods__["sizeCompressionEnv"] = _sms.HYB_PARAMS_sizeCompressionEnv_set
    __swig_getmethods__["sizeCompressionEnv"] = _sms.HYB_PARAMS_sizeCompressionEnv_get
    if _newclass:sizeCompressionEnv = _swig_property(_sms.HYB_PARAMS_sizeCompressionEnv_get, _sms.HYB_PARAMS_sizeCompressionEnv_set)
    def __init__(self, *args): 
        this = _sms.new_HYB_PARAMS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_HYB_PARAMS
    __del__ = lambda self : None;
HYB_PARAMS_swigregister = _sms.HYB_PARAMS_swigregister
HYB_PARAMS_swigregister(HYB_PARAMS)

SmsAnalysis = _sms.SmsAnalysis
Initialize = _sms.Initialize
FillBuffer = _sms.FillBuffer
moveFrames = _sms.moveFrames
InitializeFrame = _sms.InitializeFrame
ComputeFrame = _sms.ComputeFrame
GetWindow = _sms.GetWindow
BlackmanHarris = _sms.BlackmanHarris
Hamming = _sms.Hamming
Hanning = _sms.Hanning
realft = _sms.realft
Spectrum = _sms.Spectrum
QuickSpectrum = _sms.QuickSpectrum
QuickSpectrumF = _sms.QuickSpectrumF
InverseQuickSpectrum = _sms.InverseQuickSpectrum
InverseQuickSpectrumW = _sms.InverseQuickSpectrumW
SpectralApprox = _sms.SpectralApprox
SetSizeWindow = _sms.SetSizeWindow
GetDeviation = _sms.GetDeviation
ReAnalyze = _sms.ReAnalyze
PeakDetection = _sms.PeakDetection
HarmDetection = _sms.HarmDetection
GenPeakContinuation = _sms.GenPeakContinuation
DeleteCandidate = _sms.DeleteCandidate
PeakContinuation = _sms.PeakContinuation
PreEmphasis = _sms.PreEmphasis
DeEmphasis = _sms.DeEmphasis
Covariance = _sms.Covariance
CovLatticeHarm = _sms.CovLatticeHarm
CleanTrajectories = _sms.CleanTrajectories
ScaleDeterministic = _sms.ScaleDeterministic
PrepSine = _sms.PrepSine
SinTab = _sms.SinTab
PrepSinc = _sms.PrepSinc
SincTab = _sms.SincTab
SmsSynthesis = _sms.SmsSynthesis
FrameSineSynth = _sms.FrameSineSynth
random = _sms.random
WriteSmsHeader = _sms.WriteSmsHeader
WriteSmsFile = _sms.WriteSmsFile
WriteSmsRecord = _sms.WriteSmsRecord
InitSmsHeader = _sms.InitSmsHeader
AllocSmsRecord = _sms.AllocSmsRecord
AllocateSmsRecord = _sms.AllocateSmsRecord
GetSmsRecord = _sms.GetSmsRecord
GetSmsHeader = _sms.GetSmsHeader
GetRecordBSize = _sms.GetRecordBSize
quit = _sms.quit
InitSmsRecord = _sms.InitSmsRecord
FreeSmsRecord = _sms.FreeSmsRecord
ClearSmsRecord = _sms.ClearSmsRecord
CopySmsRecord = _sms.CopySmsRecord
MoveFrames = _sms.MoveFrames
GetResidual = _sms.GetResidual
StocAnalysis = _sms.StocAnalysis
CreateResidualFile = _sms.CreateResidualFile
WriteToResidualFile = _sms.WriteToResidualFile
WriteResidualFile = _sms.WriteResidualFile
CreateDebugFile = _sms.CreateDebugFile
WriteDebugFile = _sms.WriteDebugFile
InterpolateArrays = _sms.InterpolateArrays
InterpolateSmsRecords = _sms.InterpolateSmsRecords
FilterArray = _sms.FilterArray
ClearSine = _sms.ClearSine
IFFTwindow = _sms.IFFTwindow
GetSoundData = _sms.GetSoundData
OpenSound = _sms.OpenSound
CreateOutputSoundFile = _sms.CreateOutputSoundFile
WriteToOutputFile = _sms.WriteToOutputFile
WriteOutputFile = _sms.WriteOutputFile
Hybridize = _sms.Hybridize
freeBuffers = _sms.freeBuffers


