# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _sms
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


SMS_MAX_NPEAKS = _sms.SMS_MAX_NPEAKS
class SMS_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iSmsMagic"] = _sms.SMS_Header_iSmsMagic_set
    __swig_getmethods__["iSmsMagic"] = _sms.SMS_Header_iSmsMagic_get
    if _newclass:iSmsMagic = _swig_property(_sms.SMS_Header_iSmsMagic_get, _sms.SMS_Header_iSmsMagic_set)
    __swig_setmethods__["iHeadBSize"] = _sms.SMS_Header_iHeadBSize_set
    __swig_getmethods__["iHeadBSize"] = _sms.SMS_Header_iHeadBSize_get
    if _newclass:iHeadBSize = _swig_property(_sms.SMS_Header_iHeadBSize_get, _sms.SMS_Header_iHeadBSize_set)
    __swig_setmethods__["nFrames"] = _sms.SMS_Header_nFrames_set
    __swig_getmethods__["nFrames"] = _sms.SMS_Header_nFrames_get
    if _newclass:nFrames = _swig_property(_sms.SMS_Header_nFrames_get, _sms.SMS_Header_nFrames_set)
    __swig_setmethods__["iFrameBSize"] = _sms.SMS_Header_iFrameBSize_set
    __swig_getmethods__["iFrameBSize"] = _sms.SMS_Header_iFrameBSize_get
    if _newclass:iFrameBSize = _swig_property(_sms.SMS_Header_iFrameBSize_get, _sms.SMS_Header_iFrameBSize_set)
    __swig_setmethods__["iFormat"] = _sms.SMS_Header_iFormat_set
    __swig_getmethods__["iFormat"] = _sms.SMS_Header_iFormat_get
    if _newclass:iFormat = _swig_property(_sms.SMS_Header_iFormat_get, _sms.SMS_Header_iFormat_set)
    __swig_setmethods__["iFrameRate"] = _sms.SMS_Header_iFrameRate_set
    __swig_getmethods__["iFrameRate"] = _sms.SMS_Header_iFrameRate_get
    if _newclass:iFrameRate = _swig_property(_sms.SMS_Header_iFrameRate_get, _sms.SMS_Header_iFrameRate_set)
    __swig_setmethods__["iStochasticType"] = _sms.SMS_Header_iStochasticType_set
    __swig_getmethods__["iStochasticType"] = _sms.SMS_Header_iStochasticType_get
    if _newclass:iStochasticType = _swig_property(_sms.SMS_Header_iStochasticType_get, _sms.SMS_Header_iStochasticType_set)
    __swig_setmethods__["nTracks"] = _sms.SMS_Header_nTracks_set
    __swig_getmethods__["nTracks"] = _sms.SMS_Header_nTracks_get
    if _newclass:nTracks = _swig_property(_sms.SMS_Header_nTracks_get, _sms.SMS_Header_nTracks_set)
    __swig_setmethods__["nStochasticCoeff"] = _sms.SMS_Header_nStochasticCoeff_set
    __swig_getmethods__["nStochasticCoeff"] = _sms.SMS_Header_nStochasticCoeff_get
    if _newclass:nStochasticCoeff = _swig_property(_sms.SMS_Header_nStochasticCoeff_get, _sms.SMS_Header_nStochasticCoeff_set)
    __swig_setmethods__["fAmplitude"] = _sms.SMS_Header_fAmplitude_set
    __swig_getmethods__["fAmplitude"] = _sms.SMS_Header_fAmplitude_get
    if _newclass:fAmplitude = _swig_property(_sms.SMS_Header_fAmplitude_get, _sms.SMS_Header_fAmplitude_set)
    __swig_setmethods__["fFrequency"] = _sms.SMS_Header_fFrequency_set
    __swig_getmethods__["fFrequency"] = _sms.SMS_Header_fFrequency_get
    if _newclass:fFrequency = _swig_property(_sms.SMS_Header_fFrequency_get, _sms.SMS_Header_fFrequency_set)
    __swig_setmethods__["iOriginalSRate"] = _sms.SMS_Header_iOriginalSRate_set
    __swig_getmethods__["iOriginalSRate"] = _sms.SMS_Header_iOriginalSRate_get
    if _newclass:iOriginalSRate = _swig_property(_sms.SMS_Header_iOriginalSRate_get, _sms.SMS_Header_iOriginalSRate_set)
    __swig_setmethods__["iBegSteadyState"] = _sms.SMS_Header_iBegSteadyState_set
    __swig_getmethods__["iBegSteadyState"] = _sms.SMS_Header_iBegSteadyState_get
    if _newclass:iBegSteadyState = _swig_property(_sms.SMS_Header_iBegSteadyState_get, _sms.SMS_Header_iBegSteadyState_set)
    __swig_setmethods__["iEndSteadyState"] = _sms.SMS_Header_iEndSteadyState_set
    __swig_getmethods__["iEndSteadyState"] = _sms.SMS_Header_iEndSteadyState_get
    if _newclass:iEndSteadyState = _swig_property(_sms.SMS_Header_iEndSteadyState_get, _sms.SMS_Header_iEndSteadyState_set)
    __swig_setmethods__["fResidualPerc"] = _sms.SMS_Header_fResidualPerc_set
    __swig_getmethods__["fResidualPerc"] = _sms.SMS_Header_fResidualPerc_get
    if _newclass:fResidualPerc = _swig_property(_sms.SMS_Header_fResidualPerc_get, _sms.SMS_Header_fResidualPerc_set)
    __swig_setmethods__["nLoopRecords"] = _sms.SMS_Header_nLoopRecords_set
    __swig_getmethods__["nLoopRecords"] = _sms.SMS_Header_nLoopRecords_get
    if _newclass:nLoopRecords = _swig_property(_sms.SMS_Header_nLoopRecords_get, _sms.SMS_Header_nLoopRecords_set)
    __swig_setmethods__["nSpecEnvelopePoints"] = _sms.SMS_Header_nSpecEnvelopePoints_set
    __swig_getmethods__["nSpecEnvelopePoints"] = _sms.SMS_Header_nSpecEnvelopePoints_get
    if _newclass:nSpecEnvelopePoints = _swig_property(_sms.SMS_Header_nSpecEnvelopePoints_get, _sms.SMS_Header_nSpecEnvelopePoints_set)
    __swig_setmethods__["nTextCharacters"] = _sms.SMS_Header_nTextCharacters_set
    __swig_getmethods__["nTextCharacters"] = _sms.SMS_Header_nTextCharacters_get
    if _newclass:nTextCharacters = _swig_property(_sms.SMS_Header_nTextCharacters_get, _sms.SMS_Header_nTextCharacters_set)
    __swig_setmethods__["pILoopRecords"] = _sms.SMS_Header_pILoopRecords_set
    __swig_getmethods__["pILoopRecords"] = _sms.SMS_Header_pILoopRecords_get
    if _newclass:pILoopRecords = _swig_property(_sms.SMS_Header_pILoopRecords_get, _sms.SMS_Header_pILoopRecords_set)
    __swig_setmethods__["pFSpectralEnvelope"] = _sms.SMS_Header_pFSpectralEnvelope_set
    __swig_getmethods__["pFSpectralEnvelope"] = _sms.SMS_Header_pFSpectralEnvelope_get
    if _newclass:pFSpectralEnvelope = _swig_property(_sms.SMS_Header_pFSpectralEnvelope_get, _sms.SMS_Header_pFSpectralEnvelope_set)
    __swig_setmethods__["pChTextCharacters"] = _sms.SMS_Header_pChTextCharacters_set
    __swig_getmethods__["pChTextCharacters"] = _sms.SMS_Header_pChTextCharacters_get
    if _newclass:pChTextCharacters = _swig_property(_sms.SMS_Header_pChTextCharacters_get, _sms.SMS_Header_pChTextCharacters_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_Header(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_Header
    __del__ = lambda self : None;
SMS_Header_swigregister = _sms.SMS_Header_swigregister
SMS_Header_swigregister(SMS_Header)

class SMS_SndHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_SndHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_SndHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nSamples"] = _sms.SMS_SndHeader_nSamples_set
    __swig_getmethods__["nSamples"] = _sms.SMS_SndHeader_nSamples_get
    if _newclass:nSamples = _swig_property(_sms.SMS_SndHeader_nSamples_get, _sms.SMS_SndHeader_nSamples_set)
    __swig_setmethods__["iSamplingRate"] = _sms.SMS_SndHeader_iSamplingRate_set
    __swig_getmethods__["iSamplingRate"] = _sms.SMS_SndHeader_iSamplingRate_get
    if _newclass:iSamplingRate = _swig_property(_sms.SMS_SndHeader_iSamplingRate_get, _sms.SMS_SndHeader_iSamplingRate_set)
    __swig_setmethods__["channelCount"] = _sms.SMS_SndHeader_channelCount_set
    __swig_getmethods__["channelCount"] = _sms.SMS_SndHeader_channelCount_get
    if _newclass:channelCount = _swig_property(_sms.SMS_SndHeader_channelCount_get, _sms.SMS_SndHeader_channelCount_set)
    __swig_setmethods__["sizeHeader"] = _sms.SMS_SndHeader_sizeHeader_set
    __swig_getmethods__["sizeHeader"] = _sms.SMS_SndHeader_sizeHeader_get
    if _newclass:sizeHeader = _swig_property(_sms.SMS_SndHeader_sizeHeader_get, _sms.SMS_SndHeader_sizeHeader_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_SndHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_SndHeader
    __del__ = lambda self : None;
SMS_SndHeader_swigregister = _sms.SMS_SndHeader_swigregister
SMS_SndHeader_swigregister(SMS_SndHeader)

class SMS_Data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_Data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pSmsData"] = _sms.SMS_Data_pSmsData_set
    __swig_getmethods__["pSmsData"] = _sms.SMS_Data_pSmsData_get
    if _newclass:pSmsData = _swig_property(_sms.SMS_Data_pSmsData_get, _sms.SMS_Data_pSmsData_set)
    __swig_setmethods__["sizeData"] = _sms.SMS_Data_sizeData_set
    __swig_getmethods__["sizeData"] = _sms.SMS_Data_sizeData_get
    if _newclass:sizeData = _swig_property(_sms.SMS_Data_sizeData_get, _sms.SMS_Data_sizeData_set)
    __swig_setmethods__["pFSinFreq"] = _sms.SMS_Data_pFSinFreq_set
    __swig_getmethods__["pFSinFreq"] = _sms.SMS_Data_pFSinFreq_get
    if _newclass:pFSinFreq = _swig_property(_sms.SMS_Data_pFSinFreq_get, _sms.SMS_Data_pFSinFreq_set)
    __swig_setmethods__["pFSinAmp"] = _sms.SMS_Data_pFSinAmp_set
    __swig_getmethods__["pFSinAmp"] = _sms.SMS_Data_pFSinAmp_get
    if _newclass:pFSinAmp = _swig_property(_sms.SMS_Data_pFSinAmp_get, _sms.SMS_Data_pFSinAmp_set)
    __swig_setmethods__["pFSinPha"] = _sms.SMS_Data_pFSinPha_set
    __swig_getmethods__["pFSinPha"] = _sms.SMS_Data_pFSinPha_get
    if _newclass:pFSinPha = _swig_property(_sms.SMS_Data_pFSinPha_get, _sms.SMS_Data_pFSinPha_set)
    __swig_setmethods__["nTracks"] = _sms.SMS_Data_nTracks_set
    __swig_getmethods__["nTracks"] = _sms.SMS_Data_nTracks_get
    if _newclass:nTracks = _swig_property(_sms.SMS_Data_nTracks_get, _sms.SMS_Data_nTracks_set)
    __swig_setmethods__["pFStocGain"] = _sms.SMS_Data_pFStocGain_set
    __swig_getmethods__["pFStocGain"] = _sms.SMS_Data_pFStocGain_get
    if _newclass:pFStocGain = _swig_property(_sms.SMS_Data_pFStocGain_get, _sms.SMS_Data_pFStocGain_set)
    __swig_setmethods__["pFStocCoeff"] = _sms.SMS_Data_pFStocCoeff_set
    __swig_getmethods__["pFStocCoeff"] = _sms.SMS_Data_pFStocCoeff_get
    if _newclass:pFStocCoeff = _swig_property(_sms.SMS_Data_pFStocCoeff_get, _sms.SMS_Data_pFStocCoeff_set)
    __swig_setmethods__["nCoeff"] = _sms.SMS_Data_nCoeff_set
    __swig_getmethods__["nCoeff"] = _sms.SMS_Data_nCoeff_get
    if _newclass:nCoeff = _swig_property(_sms.SMS_Data_nCoeff_get, _sms.SMS_Data_nCoeff_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_Data(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_Data
    __del__ = lambda self : None;
SMS_Data_swigregister = _sms.SMS_Data_swigregister
SMS_Data_swigregister(SMS_Data)

class SMS_SndBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_SndBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_SndBuffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pFBuffer"] = _sms.SMS_SndBuffer_pFBuffer_set
    __swig_getmethods__["pFBuffer"] = _sms.SMS_SndBuffer_pFBuffer_get
    if _newclass:pFBuffer = _swig_property(_sms.SMS_SndBuffer_pFBuffer_get, _sms.SMS_SndBuffer_pFBuffer_set)
    __swig_setmethods__["sizeBuffer"] = _sms.SMS_SndBuffer_sizeBuffer_set
    __swig_getmethods__["sizeBuffer"] = _sms.SMS_SndBuffer_sizeBuffer_get
    if _newclass:sizeBuffer = _swig_property(_sms.SMS_SndBuffer_sizeBuffer_get, _sms.SMS_SndBuffer_sizeBuffer_set)
    __swig_setmethods__["iMarker"] = _sms.SMS_SndBuffer_iMarker_set
    __swig_getmethods__["iMarker"] = _sms.SMS_SndBuffer_iMarker_get
    if _newclass:iMarker = _swig_property(_sms.SMS_SndBuffer_iMarker_get, _sms.SMS_SndBuffer_iMarker_set)
    __swig_setmethods__["iFirstGood"] = _sms.SMS_SndBuffer_iFirstGood_set
    __swig_getmethods__["iFirstGood"] = _sms.SMS_SndBuffer_iFirstGood_get
    if _newclass:iFirstGood = _swig_property(_sms.SMS_SndBuffer_iFirstGood_get, _sms.SMS_SndBuffer_iFirstGood_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_SndBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_SndBuffer
    __del__ = lambda self : None;
SMS_SndBuffer_swigregister = _sms.SMS_SndBuffer_swigregister
SMS_SndBuffer_swigregister(SMS_SndBuffer)

class SMS_Peak(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_Peak, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_Peak, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fFreq"] = _sms.SMS_Peak_fFreq_set
    __swig_getmethods__["fFreq"] = _sms.SMS_Peak_fFreq_get
    if _newclass:fFreq = _swig_property(_sms.SMS_Peak_fFreq_get, _sms.SMS_Peak_fFreq_set)
    __swig_setmethods__["fMag"] = _sms.SMS_Peak_fMag_set
    __swig_getmethods__["fMag"] = _sms.SMS_Peak_fMag_get
    if _newclass:fMag = _swig_property(_sms.SMS_Peak_fMag_get, _sms.SMS_Peak_fMag_set)
    __swig_setmethods__["fPhase"] = _sms.SMS_Peak_fPhase_set
    __swig_getmethods__["fPhase"] = _sms.SMS_Peak_fPhase_get
    if _newclass:fPhase = _swig_property(_sms.SMS_Peak_fPhase_get, _sms.SMS_Peak_fPhase_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_Peak(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_Peak
    __del__ = lambda self : None;
SMS_Peak_swigregister = _sms.SMS_Peak_swigregister
SMS_Peak_swigregister(SMS_Peak)

class SMS_AnalFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_AnalFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_AnalFrame, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iFrameSample"] = _sms.SMS_AnalFrame_iFrameSample_set
    __swig_getmethods__["iFrameSample"] = _sms.SMS_AnalFrame_iFrameSample_get
    if _newclass:iFrameSample = _swig_property(_sms.SMS_AnalFrame_iFrameSample_get, _sms.SMS_AnalFrame_iFrameSample_set)
    __swig_setmethods__["iFrameSize"] = _sms.SMS_AnalFrame_iFrameSize_set
    __swig_getmethods__["iFrameSize"] = _sms.SMS_AnalFrame_iFrameSize_get
    if _newclass:iFrameSize = _swig_property(_sms.SMS_AnalFrame_iFrameSize_get, _sms.SMS_AnalFrame_iFrameSize_set)
    __swig_setmethods__["iFrameNum"] = _sms.SMS_AnalFrame_iFrameNum_set
    __swig_getmethods__["iFrameNum"] = _sms.SMS_AnalFrame_iFrameNum_get
    if _newclass:iFrameNum = _swig_property(_sms.SMS_AnalFrame_iFrameNum_get, _sms.SMS_AnalFrame_iFrameNum_set)
    __swig_setmethods__["pSpectralPeaks"] = _sms.SMS_AnalFrame_pSpectralPeaks_set
    __swig_getmethods__["pSpectralPeaks"] = _sms.SMS_AnalFrame_pSpectralPeaks_get
    if _newclass:pSpectralPeaks = _swig_property(_sms.SMS_AnalFrame_pSpectralPeaks_get, _sms.SMS_AnalFrame_pSpectralPeaks_set)
    __swig_setmethods__["nPeaks"] = _sms.SMS_AnalFrame_nPeaks_set
    __swig_getmethods__["nPeaks"] = _sms.SMS_AnalFrame_nPeaks_get
    if _newclass:nPeaks = _swig_property(_sms.SMS_AnalFrame_nPeaks_get, _sms.SMS_AnalFrame_nPeaks_set)
    __swig_setmethods__["fFundamental"] = _sms.SMS_AnalFrame_fFundamental_set
    __swig_getmethods__["fFundamental"] = _sms.SMS_AnalFrame_fFundamental_get
    if _newclass:fFundamental = _swig_property(_sms.SMS_AnalFrame_fFundamental_get, _sms.SMS_AnalFrame_fFundamental_set)
    __swig_setmethods__["deterministic"] = _sms.SMS_AnalFrame_deterministic_set
    __swig_getmethods__["deterministic"] = _sms.SMS_AnalFrame_deterministic_get
    if _newclass:deterministic = _swig_property(_sms.SMS_AnalFrame_deterministic_get, _sms.SMS_AnalFrame_deterministic_set)
    __swig_setmethods__["iStatus"] = _sms.SMS_AnalFrame_iStatus_set
    __swig_getmethods__["iStatus"] = _sms.SMS_AnalFrame_iStatus_get
    if _newclass:iStatus = _swig_property(_sms.SMS_AnalFrame_iStatus_get, _sms.SMS_AnalFrame_iStatus_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_AnalFrame(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_AnalFrame
    __del__ = lambda self : None;
SMS_AnalFrame_swigregister = _sms.SMS_AnalFrame_swigregister
SMS_AnalFrame_swigregister(SMS_AnalFrame)

class SMS_AnalParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_AnalParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_AnalParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iDebugMode"] = _sms.SMS_AnalParams_iDebugMode_set
    __swig_getmethods__["iDebugMode"] = _sms.SMS_AnalParams_iDebugMode_get
    if _newclass:iDebugMode = _swig_property(_sms.SMS_AnalParams_iDebugMode_get, _sms.SMS_AnalParams_iDebugMode_set)
    __swig_setmethods__["iFormat"] = _sms.SMS_AnalParams_iFormat_set
    __swig_getmethods__["iFormat"] = _sms.SMS_AnalParams_iFormat_get
    if _newclass:iFormat = _swig_property(_sms.SMS_AnalParams_iFormat_get, _sms.SMS_AnalParams_iFormat_set)
    __swig_setmethods__["iFrameRate"] = _sms.SMS_AnalParams_iFrameRate_set
    __swig_getmethods__["iFrameRate"] = _sms.SMS_AnalParams_iFrameRate_get
    if _newclass:iFrameRate = _swig_property(_sms.SMS_AnalParams_iFrameRate_get, _sms.SMS_AnalParams_iFrameRate_set)
    __swig_setmethods__["iStochasticType"] = _sms.SMS_AnalParams_iStochasticType_set
    __swig_getmethods__["iStochasticType"] = _sms.SMS_AnalParams_iStochasticType_get
    if _newclass:iStochasticType = _swig_property(_sms.SMS_AnalParams_iStochasticType_get, _sms.SMS_AnalParams_iStochasticType_set)
    __swig_setmethods__["nStochasticCoeff"] = _sms.SMS_AnalParams_nStochasticCoeff_set
    __swig_getmethods__["nStochasticCoeff"] = _sms.SMS_AnalParams_nStochasticCoeff_get
    if _newclass:nStochasticCoeff = _swig_property(_sms.SMS_AnalParams_nStochasticCoeff_get, _sms.SMS_AnalParams_nStochasticCoeff_set)
    __swig_setmethods__["fLowestFundamental"] = _sms.SMS_AnalParams_fLowestFundamental_set
    __swig_getmethods__["fLowestFundamental"] = _sms.SMS_AnalParams_fLowestFundamental_get
    if _newclass:fLowestFundamental = _swig_property(_sms.SMS_AnalParams_fLowestFundamental_get, _sms.SMS_AnalParams_fLowestFundamental_set)
    __swig_setmethods__["fHighestFundamental"] = _sms.SMS_AnalParams_fHighestFundamental_set
    __swig_getmethods__["fHighestFundamental"] = _sms.SMS_AnalParams_fHighestFundamental_get
    if _newclass:fHighestFundamental = _swig_property(_sms.SMS_AnalParams_fHighestFundamental_get, _sms.SMS_AnalParams_fHighestFundamental_set)
    __swig_setmethods__["fDefaultFundamental"] = _sms.SMS_AnalParams_fDefaultFundamental_set
    __swig_getmethods__["fDefaultFundamental"] = _sms.SMS_AnalParams_fDefaultFundamental_get
    if _newclass:fDefaultFundamental = _swig_property(_sms.SMS_AnalParams_fDefaultFundamental_get, _sms.SMS_AnalParams_fDefaultFundamental_set)
    __swig_setmethods__["fPeakContToGuide"] = _sms.SMS_AnalParams_fPeakContToGuide_set
    __swig_getmethods__["fPeakContToGuide"] = _sms.SMS_AnalParams_fPeakContToGuide_get
    if _newclass:fPeakContToGuide = _swig_property(_sms.SMS_AnalParams_fPeakContToGuide_get, _sms.SMS_AnalParams_fPeakContToGuide_set)
    __swig_setmethods__["fFundContToGuide"] = _sms.SMS_AnalParams_fFundContToGuide_set
    __swig_getmethods__["fFundContToGuide"] = _sms.SMS_AnalParams_fFundContToGuide_get
    if _newclass:fFundContToGuide = _swig_property(_sms.SMS_AnalParams_fFundContToGuide_get, _sms.SMS_AnalParams_fFundContToGuide_set)
    __swig_setmethods__["fFreqDeviation"] = _sms.SMS_AnalParams_fFreqDeviation_set
    __swig_getmethods__["fFreqDeviation"] = _sms.SMS_AnalParams_fFreqDeviation_get
    if _newclass:fFreqDeviation = _swig_property(_sms.SMS_AnalParams_fFreqDeviation_get, _sms.SMS_AnalParams_fFreqDeviation_set)
    __swig_setmethods__["iSamplingRate"] = _sms.SMS_AnalParams_iSamplingRate_set
    __swig_getmethods__["iSamplingRate"] = _sms.SMS_AnalParams_iSamplingRate_get
    if _newclass:iSamplingRate = _swig_property(_sms.SMS_AnalParams_iSamplingRate_get, _sms.SMS_AnalParams_iSamplingRate_set)
    __swig_setmethods__["iDefaultSizeWindow"] = _sms.SMS_AnalParams_iDefaultSizeWindow_set
    __swig_getmethods__["iDefaultSizeWindow"] = _sms.SMS_AnalParams_iDefaultSizeWindow_get
    if _newclass:iDefaultSizeWindow = _swig_property(_sms.SMS_AnalParams_iDefaultSizeWindow_get, _sms.SMS_AnalParams_iDefaultSizeWindow_set)
    __swig_setmethods__["sizeHop"] = _sms.SMS_AnalParams_sizeHop_set
    __swig_getmethods__["sizeHop"] = _sms.SMS_AnalParams_sizeHop_get
    if _newclass:sizeHop = _swig_property(_sms.SMS_AnalParams_sizeHop_get, _sms.SMS_AnalParams_sizeHop_set)
    __swig_setmethods__["fSizeWindow"] = _sms.SMS_AnalParams_fSizeWindow_set
    __swig_getmethods__["fSizeWindow"] = _sms.SMS_AnalParams_fSizeWindow_get
    if _newclass:fSizeWindow = _swig_property(_sms.SMS_AnalParams_fSizeWindow_get, _sms.SMS_AnalParams_fSizeWindow_set)
    __swig_setmethods__["nGuides"] = _sms.SMS_AnalParams_nGuides_set
    __swig_getmethods__["nGuides"] = _sms.SMS_AnalParams_nGuides_get
    if _newclass:nGuides = _swig_property(_sms.SMS_AnalParams_nGuides_get, _sms.SMS_AnalParams_nGuides_set)
    __swig_setmethods__["iCleanTracks"] = _sms.SMS_AnalParams_iCleanTracks_set
    __swig_getmethods__["iCleanTracks"] = _sms.SMS_AnalParams_iCleanTracks_get
    if _newclass:iCleanTracks = _swig_property(_sms.SMS_AnalParams_iCleanTracks_get, _sms.SMS_AnalParams_iCleanTracks_set)
    __swig_setmethods__["fMinRefHarmMag"] = _sms.SMS_AnalParams_fMinRefHarmMag_set
    __swig_getmethods__["fMinRefHarmMag"] = _sms.SMS_AnalParams_fMinRefHarmMag_get
    if _newclass:fMinRefHarmMag = _swig_property(_sms.SMS_AnalParams_fMinRefHarmMag_get, _sms.SMS_AnalParams_fMinRefHarmMag_set)
    __swig_setmethods__["fRefHarmMagDiffFromMax"] = _sms.SMS_AnalParams_fRefHarmMagDiffFromMax_set
    __swig_getmethods__["fRefHarmMagDiffFromMax"] = _sms.SMS_AnalParams_fRefHarmMagDiffFromMax_get
    if _newclass:fRefHarmMagDiffFromMax = _swig_property(_sms.SMS_AnalParams_fRefHarmMagDiffFromMax_get, _sms.SMS_AnalParams_fRefHarmMagDiffFromMax_set)
    __swig_setmethods__["iRefHarmonic"] = _sms.SMS_AnalParams_iRefHarmonic_set
    __swig_getmethods__["iRefHarmonic"] = _sms.SMS_AnalParams_iRefHarmonic_get
    if _newclass:iRefHarmonic = _swig_property(_sms.SMS_AnalParams_iRefHarmonic_get, _sms.SMS_AnalParams_iRefHarmonic_set)
    __swig_setmethods__["iMinTrackLength"] = _sms.SMS_AnalParams_iMinTrackLength_set
    __swig_getmethods__["iMinTrackLength"] = _sms.SMS_AnalParams_iMinTrackLength_get
    if _newclass:iMinTrackLength = _swig_property(_sms.SMS_AnalParams_iMinTrackLength_get, _sms.SMS_AnalParams_iMinTrackLength_set)
    __swig_setmethods__["iMaxSleepingTime"] = _sms.SMS_AnalParams_iMaxSleepingTime_set
    __swig_getmethods__["iMaxSleepingTime"] = _sms.SMS_AnalParams_iMaxSleepingTime_get
    if _newclass:iMaxSleepingTime = _swig_property(_sms.SMS_AnalParams_iMaxSleepingTime_get, _sms.SMS_AnalParams_iMaxSleepingTime_set)
    __swig_setmethods__["fHighestFreq"] = _sms.SMS_AnalParams_fHighestFreq_set
    __swig_getmethods__["fHighestFreq"] = _sms.SMS_AnalParams_fHighestFreq_get
    if _newclass:fHighestFreq = _swig_property(_sms.SMS_AnalParams_fHighestFreq_get, _sms.SMS_AnalParams_fHighestFreq_set)
    __swig_setmethods__["fMinPeakMag"] = _sms.SMS_AnalParams_fMinPeakMag_set
    __swig_getmethods__["fMinPeakMag"] = _sms.SMS_AnalParams_fMinPeakMag_get
    if _newclass:fMinPeakMag = _swig_property(_sms.SMS_AnalParams_fMinPeakMag_get, _sms.SMS_AnalParams_fMinPeakMag_set)
    __swig_setmethods__["iSoundType"] = _sms.SMS_AnalParams_iSoundType_set
    __swig_getmethods__["iSoundType"] = _sms.SMS_AnalParams_iSoundType_get
    if _newclass:iSoundType = _swig_property(_sms.SMS_AnalParams_iSoundType_get, _sms.SMS_AnalParams_iSoundType_set)
    __swig_setmethods__["iAnalysisDirection"] = _sms.SMS_AnalParams_iAnalysisDirection_set
    __swig_getmethods__["iAnalysisDirection"] = _sms.SMS_AnalParams_iAnalysisDirection_get
    if _newclass:iAnalysisDirection = _swig_property(_sms.SMS_AnalParams_iAnalysisDirection_get, _sms.SMS_AnalParams_iAnalysisDirection_set)
    __swig_setmethods__["iSizeSound"] = _sms.SMS_AnalParams_iSizeSound_set
    __swig_getmethods__["iSizeSound"] = _sms.SMS_AnalParams_iSizeSound_get
    if _newclass:iSizeSound = _swig_property(_sms.SMS_AnalParams_iSizeSound_get, _sms.SMS_AnalParams_iSizeSound_set)
    __swig_setmethods__["iWindowType"] = _sms.SMS_AnalParams_iWindowType_set
    __swig_getmethods__["iWindowType"] = _sms.SMS_AnalParams_iWindowType_get
    if _newclass:iWindowType = _swig_property(_sms.SMS_AnalParams_iWindowType_get, _sms.SMS_AnalParams_iWindowType_set)
    __swig_setmethods__["iMaxDelayFrames"] = _sms.SMS_AnalParams_iMaxDelayFrames_set
    __swig_getmethods__["iMaxDelayFrames"] = _sms.SMS_AnalParams_iMaxDelayFrames_get
    if _newclass:iMaxDelayFrames = _swig_property(_sms.SMS_AnalParams_iMaxDelayFrames_get, _sms.SMS_AnalParams_iMaxDelayFrames_set)
    __swig_setmethods__["prevFrame"] = _sms.SMS_AnalParams_prevFrame_set
    __swig_getmethods__["prevFrame"] = _sms.SMS_AnalParams_prevFrame_get
    if _newclass:prevFrame = _swig_property(_sms.SMS_AnalParams_prevFrame_get, _sms.SMS_AnalParams_prevFrame_set)
    __swig_setmethods__["soundBuffer"] = _sms.SMS_AnalParams_soundBuffer_set
    __swig_getmethods__["soundBuffer"] = _sms.SMS_AnalParams_soundBuffer_get
    if _newclass:soundBuffer = _swig_property(_sms.SMS_AnalParams_soundBuffer_get, _sms.SMS_AnalParams_soundBuffer_set)
    __swig_setmethods__["synthBuffer"] = _sms.SMS_AnalParams_synthBuffer_set
    __swig_getmethods__["synthBuffer"] = _sms.SMS_AnalParams_synthBuffer_get
    if _newclass:synthBuffer = _swig_property(_sms.SMS_AnalParams_synthBuffer_get, _sms.SMS_AnalParams_synthBuffer_set)
    __swig_setmethods__["pFrames"] = _sms.SMS_AnalParams_pFrames_set
    __swig_getmethods__["pFrames"] = _sms.SMS_AnalParams_pFrames_get
    if _newclass:pFrames = _swig_property(_sms.SMS_AnalParams_pFrames_get, _sms.SMS_AnalParams_pFrames_set)
    __swig_setmethods__["ppFrames"] = _sms.SMS_AnalParams_ppFrames_set
    __swig_getmethods__["ppFrames"] = _sms.SMS_AnalParams_ppFrames_get
    if _newclass:ppFrames = _swig_property(_sms.SMS_AnalParams_ppFrames_get, _sms.SMS_AnalParams_ppFrames_set)
    __swig_setmethods__["fResidualPercentage"] = _sms.SMS_AnalParams_fResidualPercentage_set
    __swig_getmethods__["fResidualPercentage"] = _sms.SMS_AnalParams_fResidualPercentage_get
    if _newclass:fResidualPercentage = _swig_property(_sms.SMS_AnalParams_fResidualPercentage_get, _sms.SMS_AnalParams_fResidualPercentage_set)
    __swig_setmethods__["pFSpectrumWindow"] = _sms.SMS_AnalParams_pFSpectrumWindow_set
    __swig_getmethods__["pFSpectrumWindow"] = _sms.SMS_AnalParams_pFSpectrumWindow_get
    if _newclass:pFSpectrumWindow = _swig_property(_sms.SMS_AnalParams_pFSpectrumWindow_get, _sms.SMS_AnalParams_pFSpectrumWindow_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_AnalParams(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_AnalParams
    __del__ = lambda self : None;
SMS_AnalParams_swigregister = _sms.SMS_AnalParams_swigregister
SMS_AnalParams_swigregister(SMS_AnalParams)

class SMS_SynthParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_SynthParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_SynthParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iStochasticType"] = _sms.SMS_SynthParams_iStochasticType_set
    __swig_getmethods__["iStochasticType"] = _sms.SMS_SynthParams_iStochasticType_get
    if _newclass:iStochasticType = _swig_property(_sms.SMS_SynthParams_iStochasticType_get, _sms.SMS_SynthParams_iStochasticType_set)
    __swig_setmethods__["iSynthesisType"] = _sms.SMS_SynthParams_iSynthesisType_set
    __swig_getmethods__["iSynthesisType"] = _sms.SMS_SynthParams_iSynthesisType_get
    if _newclass:iSynthesisType = _swig_property(_sms.SMS_SynthParams_iSynthesisType_get, _sms.SMS_SynthParams_iSynthesisType_set)
    __swig_setmethods__["iDetSynthType"] = _sms.SMS_SynthParams_iDetSynthType_set
    __swig_getmethods__["iDetSynthType"] = _sms.SMS_SynthParams_iDetSynthType_get
    if _newclass:iDetSynthType = _swig_property(_sms.SMS_SynthParams_iDetSynthType_get, _sms.SMS_SynthParams_iDetSynthType_set)
    __swig_setmethods__["iOriginalSRate"] = _sms.SMS_SynthParams_iOriginalSRate_set
    __swig_getmethods__["iOriginalSRate"] = _sms.SMS_SynthParams_iOriginalSRate_get
    if _newclass:iOriginalSRate = _swig_property(_sms.SMS_SynthParams_iOriginalSRate_get, _sms.SMS_SynthParams_iOriginalSRate_set)
    __swig_setmethods__["iSamplingRate"] = _sms.SMS_SynthParams_iSamplingRate_set
    __swig_getmethods__["iSamplingRate"] = _sms.SMS_SynthParams_iSamplingRate_get
    if _newclass:iSamplingRate = _swig_property(_sms.SMS_SynthParams_iSamplingRate_get, _sms.SMS_SynthParams_iSamplingRate_set)
    __swig_setmethods__["prevFrame"] = _sms.SMS_SynthParams_prevFrame_set
    __swig_getmethods__["prevFrame"] = _sms.SMS_SynthParams_prevFrame_get
    if _newclass:prevFrame = _swig_property(_sms.SMS_SynthParams_prevFrame_get, _sms.SMS_SynthParams_prevFrame_set)
    __swig_setmethods__["sizeHop"] = _sms.SMS_SynthParams_sizeHop_set
    __swig_getmethods__["sizeHop"] = _sms.SMS_SynthParams_sizeHop_get
    if _newclass:sizeHop = _swig_property(_sms.SMS_SynthParams_sizeHop_get, _sms.SMS_SynthParams_sizeHop_set)
    __swig_setmethods__["origSizeHop"] = _sms.SMS_SynthParams_origSizeHop_set
    __swig_getmethods__["origSizeHop"] = _sms.SMS_SynthParams_origSizeHop_get
    if _newclass:origSizeHop = _swig_property(_sms.SMS_SynthParams_origSizeHop_get, _sms.SMS_SynthParams_origSizeHop_set)
    __swig_setmethods__["pFDetWindow"] = _sms.SMS_SynthParams_pFDetWindow_set
    __swig_getmethods__["pFDetWindow"] = _sms.SMS_SynthParams_pFDetWindow_get
    if _newclass:pFDetWindow = _swig_property(_sms.SMS_SynthParams_pFDetWindow_get, _sms.SMS_SynthParams_pFDetWindow_set)
    __swig_setmethods__["pFStocWindow"] = _sms.SMS_SynthParams_pFStocWindow_set
    __swig_getmethods__["pFStocWindow"] = _sms.SMS_SynthParams_pFStocWindow_get
    if _newclass:pFStocWindow = _swig_property(_sms.SMS_SynthParams_pFStocWindow_get, _sms.SMS_SynthParams_pFStocWindow_set)
    __swig_setmethods__["fStocGain"] = _sms.SMS_SynthParams_fStocGain_set
    __swig_getmethods__["fStocGain"] = _sms.SMS_SynthParams_fStocGain_get
    if _newclass:fStocGain = _swig_property(_sms.SMS_SynthParams_fStocGain_get, _sms.SMS_SynthParams_fStocGain_set)
    __swig_setmethods__["fTranspose"] = _sms.SMS_SynthParams_fTranspose_set
    __swig_getmethods__["fTranspose"] = _sms.SMS_SynthParams_fTranspose_get
    if _newclass:fTranspose = _swig_property(_sms.SMS_SynthParams_fTranspose_get, _sms.SMS_SynthParams_fTranspose_set)
    __swig_setmethods__["realftOut"] = _sms.SMS_SynthParams_realftOut_set
    __swig_getmethods__["realftOut"] = _sms.SMS_SynthParams_realftOut_get
    if _newclass:realftOut = _swig_property(_sms.SMS_SynthParams_realftOut_get, _sms.SMS_SynthParams_realftOut_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_SynthParams(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_SynthParams
    __del__ = lambda self : None;
SMS_SynthParams_swigregister = _sms.SMS_SynthParams_swigregister
SMS_SynthParams_swigregister(SMS_SynthParams)

SMS_MIN_MAG = _sms.SMS_MIN_MAG
class SMS_HarmCandidate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_HarmCandidate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_HarmCandidate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fFreq"] = _sms.SMS_HarmCandidate_fFreq_set
    __swig_getmethods__["fFreq"] = _sms.SMS_HarmCandidate_fFreq_get
    if _newclass:fFreq = _swig_property(_sms.SMS_HarmCandidate_fFreq_get, _sms.SMS_HarmCandidate_fFreq_set)
    __swig_setmethods__["fMag"] = _sms.SMS_HarmCandidate_fMag_set
    __swig_getmethods__["fMag"] = _sms.SMS_HarmCandidate_fMag_get
    if _newclass:fMag = _swig_property(_sms.SMS_HarmCandidate_fMag_get, _sms.SMS_HarmCandidate_fMag_set)
    __swig_setmethods__["fMagPerc"] = _sms.SMS_HarmCandidate_fMagPerc_set
    __swig_getmethods__["fMagPerc"] = _sms.SMS_HarmCandidate_fMagPerc_get
    if _newclass:fMagPerc = _swig_property(_sms.SMS_HarmCandidate_fMagPerc_get, _sms.SMS_HarmCandidate_fMagPerc_set)
    __swig_setmethods__["fFreqDev"] = _sms.SMS_HarmCandidate_fFreqDev_set
    __swig_getmethods__["fFreqDev"] = _sms.SMS_HarmCandidate_fFreqDev_get
    if _newclass:fFreqDev = _swig_property(_sms.SMS_HarmCandidate_fFreqDev_get, _sms.SMS_HarmCandidate_fFreqDev_set)
    __swig_setmethods__["fHarmRatio"] = _sms.SMS_HarmCandidate_fHarmRatio_set
    __swig_getmethods__["fHarmRatio"] = _sms.SMS_HarmCandidate_fHarmRatio_get
    if _newclass:fHarmRatio = _swig_property(_sms.SMS_HarmCandidate_fHarmRatio_get, _sms.SMS_HarmCandidate_fHarmRatio_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_HarmCandidate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_HarmCandidate
    __del__ = lambda self : None;
SMS_HarmCandidate_swigregister = _sms.SMS_HarmCandidate_swigregister
SMS_HarmCandidate_swigregister(SMS_HarmCandidate)

class SMS_ContCandidate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_ContCandidate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_ContCandidate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fFreqDev"] = _sms.SMS_ContCandidate_fFreqDev_set
    __swig_getmethods__["fFreqDev"] = _sms.SMS_ContCandidate_fFreqDev_get
    if _newclass:fFreqDev = _swig_property(_sms.SMS_ContCandidate_fFreqDev_get, _sms.SMS_ContCandidate_fFreqDev_set)
    __swig_setmethods__["fMagDev"] = _sms.SMS_ContCandidate_fMagDev_set
    __swig_getmethods__["fMagDev"] = _sms.SMS_ContCandidate_fMagDev_get
    if _newclass:fMagDev = _swig_property(_sms.SMS_ContCandidate_fMagDev_get, _sms.SMS_ContCandidate_fMagDev_set)
    __swig_setmethods__["iPeak"] = _sms.SMS_ContCandidate_iPeak_set
    __swig_getmethods__["iPeak"] = _sms.SMS_ContCandidate_iPeak_get
    if _newclass:iPeak = _swig_property(_sms.SMS_ContCandidate_iPeak_get, _sms.SMS_ContCandidate_iPeak_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_ContCandidate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_ContCandidate
    __del__ = lambda self : None;
SMS_ContCandidate_swigregister = _sms.SMS_ContCandidate_swigregister
SMS_ContCandidate_swigregister(SMS_ContCandidate)

class SMS_Guide(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_Guide, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_Guide, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fFreq"] = _sms.SMS_Guide_fFreq_set
    __swig_getmethods__["fFreq"] = _sms.SMS_Guide_fFreq_get
    if _newclass:fFreq = _swig_property(_sms.SMS_Guide_fFreq_get, _sms.SMS_Guide_fFreq_set)
    __swig_setmethods__["fMag"] = _sms.SMS_Guide_fMag_set
    __swig_getmethods__["fMag"] = _sms.SMS_Guide_fMag_get
    if _newclass:fMag = _swig_property(_sms.SMS_Guide_fMag_get, _sms.SMS_Guide_fMag_set)
    __swig_setmethods__["iStatus"] = _sms.SMS_Guide_iStatus_set
    __swig_getmethods__["iStatus"] = _sms.SMS_Guide_iStatus_get
    if _newclass:iStatus = _swig_property(_sms.SMS_Guide_iStatus_get, _sms.SMS_Guide_iStatus_set)
    __swig_setmethods__["iPeakChosen"] = _sms.SMS_Guide_iPeakChosen_set
    __swig_getmethods__["iPeakChosen"] = _sms.SMS_Guide_iPeakChosen_get
    if _newclass:iPeakChosen = _swig_property(_sms.SMS_Guide_iPeakChosen_get, _sms.SMS_Guide_iPeakChosen_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_Guide(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_Guide
    __del__ = lambda self : None;
SMS_Guide_swigregister = _sms.SMS_Guide_swigregister
SMS_Guide_swigregister(SMS_Guide)

SMS_FORMAT_H = _sms.SMS_FORMAT_H
SMS_FORMAT_IH = _sms.SMS_FORMAT_IH
SMS_FORMAT_HP = _sms.SMS_FORMAT_HP
SMS_FORMAT_IHP = _sms.SMS_FORMAT_IHP
SMS_STYPE_ALL = _sms.SMS_STYPE_ALL
SMS_STYPE_DET = _sms.SMS_STYPE_DET
SMS_STYPE_STOC = _sms.SMS_STYPE_STOC
SMS_DET_IFFT = _sms.SMS_DET_IFFT
SMS_DET_SIN = _sms.SMS_DET_SIN
SMS_STOC_NONE = _sms.SMS_STOC_NONE
SMS_STOC_APPROX = _sms.SMS_STOC_APPROX
SMS_STOC_IFFT = _sms.SMS_STOC_IFFT
SMS_OK = _sms.SMS_OK
SMS_NOPEN = _sms.SMS_NOPEN
SMS_NSMS = _sms.SMS_NSMS
SMS_MALLOC = _sms.SMS_MALLOC
SMS_RDERR = _sms.SMS_RDERR
SMS_WRERR = _sms.SMS_WRERR
SMS_FFTWERR = _sms.SMS_FFTWERR
SMS_SNDERR = _sms.SMS_SNDERR
SMS_DBG_NONE = _sms.SMS_DBG_NONE
SMS_DBG_INIT = _sms.SMS_DBG_INIT
SMS_DBG_PEAK_DET = _sms.SMS_DBG_PEAK_DET
SMS_DBG_HARM_DET = _sms.SMS_DBG_HARM_DET
SMS_DBG_PEAK_CONT = _sms.SMS_DBG_PEAK_CONT
SMS_DBG_CLEAN_TRAJ = _sms.SMS_DBG_CLEAN_TRAJ
SMS_DBG_SINE_SYNTH = _sms.SMS_DBG_SINE_SYNTH
SMS_DBG_STOC_ANAL = _sms.SMS_DBG_STOC_ANAL
SMS_DBG_STOC_SYNTH = _sms.SMS_DBG_STOC_SYNTH
SMS_DBG_SMS_ANAL = _sms.SMS_DBG_SMS_ANAL
SMS_DBG_ALL = _sms.SMS_DBG_ALL
SMS_DBG_RESIDUAL = _sms.SMS_DBG_RESIDUAL
SMS_DBG_SYNC = _sms.SMS_DBG_SYNC
SMS_MAX_WINDOW = _sms.SMS_MAX_WINDOW
SMS_SOUND_TYPE_MELODY = _sms.SMS_SOUND_TYPE_MELODY
SMS_SOUND_TYPE_NOTE = _sms.SMS_SOUND_TYPE_NOTE
SMS_DIR_FWD = _sms.SMS_DIR_FWD
SMS_DIR_REV = _sms.SMS_DIR_REV
SMS_WIN_HAMMING = _sms.SMS_WIN_HAMMING
SMS_WIN_BH_62 = _sms.SMS_WIN_BH_62
SMS_WIN_BH_70 = _sms.SMS_WIN_BH_70
SMS_WIN_BH_74 = _sms.SMS_WIN_BH_74
SMS_WIN_BH_92 = _sms.SMS_WIN_BH_92
SMS_WIN_HANNING = _sms.SMS_WIN_HANNING
SMS_WIN_IFFT = _sms.SMS_WIN_IFFT
SMS_MIN_GOOD_FRAMES = _sms.SMS_MIN_GOOD_FRAMES
SMS_MAX_DEVIATION = _sms.SMS_MAX_DEVIATION
SMS_ANAL_DELAY = _sms.SMS_ANAL_DELAY
SMS_DELAY_FRAMES = _sms.SMS_DELAY_FRAMES
SMS_FRAME_EMPTY = _sms.SMS_FRAME_EMPTY
SMS_FRAME_READY = _sms.SMS_FRAME_READY
SMS_FRAME_PEAKS_FOUND = _sms.SMS_FRAME_PEAKS_FOUND
SMS_FRAME_FUND_FOUND = _sms.SMS_FRAME_FUND_FOUND
SMS_FRAME_TRAJ_FOUND = _sms.SMS_FRAME_TRAJ_FOUND
SMS_FRAME_CLEANED = _sms.SMS_FRAME_CLEANED
SMS_FRAME_RECOMPUTED = _sms.SMS_FRAME_RECOMPUTED
SMS_FRAME_DETER_SYNTH = _sms.SMS_FRAME_DETER_SYNTH
SMS_FRAME_STOC_COMPUTED = _sms.SMS_FRAME_STOC_COMPUTED
SMS_FRAME_DONE = _sms.SMS_FRAME_DONE
SMS_FRAME_END = _sms.SMS_FRAME_END
SMS_MIN_SIZE_FRAME = _sms.SMS_MIN_SIZE_FRAME
PI = _sms.PI
TWO_PI = _sms.TWO_PI
INV_TWO_PI = _sms.INV_TWO_PI
PI_2 = _sms.PI_2
LOG2 = _sms.LOG2
LOG10 = _sms.LOG10
sms_magToDB = _sms.sms_magToDB
sms_dBToMag = _sms.sms_dBToMag
sms_analyze = _sms.sms_analyze
sms_init = _sms.sms_init
sms_free = _sms.sms_free
sms_initAnalysis = _sms.sms_initAnalysis
sms_initAnalParams = _sms.sms_initAnalParams
sms_initSynth = _sms.sms_initSynth
sms_freeAnalysis = _sms.sms_freeAnalysis
sms_freeSynth = _sms.sms_freeSynth
sms_fillSndBuffer = _sms.sms_fillSndBuffer
sms_getWindow = _sms.sms_getWindow
sms_spectrum = _sms.sms_spectrum
sms_quickSpectrum = _sms.sms_quickSpectrum
sms_invQuickSpectrum = _sms.sms_invQuickSpectrum
sms_invQuickSpectrumW = _sms.sms_invQuickSpectrumW
sms_spectralApprox = _sms.sms_spectralApprox
sms_sizeNextWindow = _sms.sms_sizeNextWindow
sms_fundDeviation = _sms.sms_fundDeviation
sms_detectPeaks = _sms.sms_detectPeaks
sms_harmDetection = _sms.sms_harmDetection
sms_peakContinuation = _sms.sms_peakContinuation
sms_preEmphasis = _sms.sms_preEmphasis
sms_deEmphasis = _sms.sms_deEmphasis
sms_cleanTracks = _sms.sms_cleanTracks
sms_scaleDet = _sms.sms_scaleDet
sms_prepSine = _sms.sms_prepSine
sms_prepSinc = _sms.sms_prepSinc
sms_clearSine = _sms.sms_clearSine
sms_clearSinc = _sms.sms_clearSinc
sms_sine = _sms.sms_sine
sms_sinc = _sms.sms_sinc
sms_random = _sms.sms_random
sms_synthesize = _sms.sms_synthesize
sms_sineSynthFrame = _sms.sms_sineSynthFrame
sms_initHeader = _sms.sms_initHeader
sms_getHeader = _sms.sms_getHeader
sms_fillHeader = _sms.sms_fillHeader
sms_writeHeader = _sms.sms_writeHeader
sms_writeFile = _sms.sms_writeFile
sms_initFrame = _sms.sms_initFrame
sms_allocFrame = _sms.sms_allocFrame
sms_allocFrameH = _sms.sms_allocFrameH
sms_getFrame = _sms.sms_getFrame
sms_writeFrame = _sms.sms_writeFrame
sms_freeFrame = _sms.sms_freeFrame
sms_clearFrame = _sms.sms_clearFrame
sms_copyFrame = _sms.sms_copyFrame
sms_frameSizeB = _sms.sms_frameSizeB
sms_errorString = _sms.sms_errorString
sms_residual = _sms.sms_residual
sms_stocAnalysis = _sms.sms_stocAnalysis
sms_interpolateFrames = _sms.sms_interpolateFrames
sms_openSF = _sms.sms_openSF
sms_getSound = _sms.sms_getSound
sms_createSF = _sms.sms_createSF
sms_writeSound = _sms.sms_writeSound
sms_writeSF = _sms.sms_writeSF
realft = _sms.realft
sms_rdft = _sms.sms_rdft
sms_createResSF = _sms.sms_createResSF
sms_writeResSound = _sms.sms_writeResSound
sms_writeResSF = _sms.sms_writeResSF
sms_createDebugFile = _sms.sms_createDebugFile
sms_writeDebugData = _sms.sms_writeDebugData
sms_writeDebugFile = _sms.sms_writeDebugFile
class SMS_HybParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMS_HybParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMS_HybParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nCoefficients"] = _sms.SMS_HybParams_nCoefficients_set
    __swig_getmethods__["nCoefficients"] = _sms.SMS_HybParams_nCoefficients_get
    if _newclass:nCoefficients = _swig_property(_sms.SMS_HybParams_nCoefficients_get, _sms.SMS_HybParams_nCoefficients_set)
    __swig_setmethods__["fGain"] = _sms.SMS_HybParams_fGain_set
    __swig_getmethods__["fGain"] = _sms.SMS_HybParams_fGain_get
    if _newclass:fGain = _swig_property(_sms.SMS_HybParams_fGain_get, _sms.SMS_HybParams_fGain_set)
    __swig_setmethods__["fMagBalance"] = _sms.SMS_HybParams_fMagBalance_set
    __swig_getmethods__["fMagBalance"] = _sms.SMS_HybParams_fMagBalance_get
    if _newclass:fMagBalance = _swig_property(_sms.SMS_HybParams_fMagBalance_get, _sms.SMS_HybParams_fMagBalance_set)
    __swig_setmethods__["iSmoothOrder"] = _sms.SMS_HybParams_iSmoothOrder_set
    __swig_getmethods__["iSmoothOrder"] = _sms.SMS_HybParams_iSmoothOrder_get
    if _newclass:iSmoothOrder = _swig_property(_sms.SMS_HybParams_iSmoothOrder_get, _sms.SMS_HybParams_iSmoothOrder_set)
    __swig_setmethods__["pCompressionEnv"] = _sms.SMS_HybParams_pCompressionEnv_set
    __swig_getmethods__["pCompressionEnv"] = _sms.SMS_HybParams_pCompressionEnv_get
    if _newclass:pCompressionEnv = _swig_property(_sms.SMS_HybParams_pCompressionEnv_get, _sms.SMS_HybParams_pCompressionEnv_set)
    __swig_setmethods__["sizeCompressionEnv"] = _sms.SMS_HybParams_sizeCompressionEnv_set
    __swig_getmethods__["sizeCompressionEnv"] = _sms.SMS_HybParams_sizeCompressionEnv_get
    if _newclass:sizeCompressionEnv = _swig_property(_sms.SMS_HybParams_sizeCompressionEnv_get, _sms.SMS_HybParams_sizeCompressionEnv_set)
    def __init__(self, *args): 
        this = _sms.new_SMS_HybParams(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sms.delete_SMS_HybParams
    __del__ = lambda self : None;
SMS_HybParams_swigregister = _sms.SMS_HybParams_swigregister
SMS_HybParams_swigregister(SMS_HybParams)

sms_hybridize = _sms.sms_hybridize
sms_filterArray = _sms.sms_filterArray


