:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
SMS Library Work Log
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
* Present Issues (todonow)
** smsanal - GetSmsHeader is crashing the open function
   - [ ] probably because x->pSmsBuf needs to be x->smsBuf (not a pointer)
** [#B] plot stochastic coefficients at different rates to see if they are the same for diff sr
** [#B] ways to fix the stoc_ big crunch in the beginning:
*** something to do with sin/sinc tables or SinePhasSynth?
*** first check if area is consistent throughout different samples.
** changing the framerate in smsAnal makes deterministic component empty. huh?
*** Xavier suggests fund estimate is bad, so specify manually
*** resample after analysis (delete 3 out of 4 frames, concatenate stoc_wave)
** what is the difference between smsClean and the cleaning within smsAnal?
** what is calcCorr in tools?
* Pre-modifications: making analysis/plotting scripts
** TODO [#C] SWIG libsms wrappers for more convenient use in python
** DONE smsPlot.py for plotting smsData over a spectrogram of audio              
** DONE smsToYaml for importing into python
* to clean:
** TODO why use smsHeader & analParams during analysis?
*** header should only be for writing file
** TODO export functions in smsAnal to library
   - have to decide whether ARGUMENTS shoud be exported
     as well, or if ANAL_PARAMS is enough and ARGUMENTS
     should be removed
   - [ ] FillAnalParams
   - [ ] FillSmsHeader
** TODO check for memory leaks
   - [ ] sine/sinc tables
   - [ ] stuff in SmsInitAnalysis
        - especially ANAL_FRAMES
*** TODO run memory leak detector
** TODO static variables in smsAnalysis
   - ComputeFrame
   - Spectrum
   - GetResidual
   - static functions in peakDetection.c and peakContinuation.c
** TODO append sms_ to functions declared in sms.h
** DONE make a function for returning a string to the error
   - right now it is necessary to cop/paste a large block of code to do this
   - should replace the 'quit' function, and shouldn't exit by default
** DONE Globals:
*** DONE Tables
    - declare them in sms.h
    - allocate in SmsInit()
*** DONE pFrames/ppFrames
*** DONE FResidualPerc
        - defined in variousFuntions for now, as SmsInit() is always called.
** DONE SmsInit() should be a global init before anything
* Phase 1: Refactoring libsms for usage in real-time and release
** TODO [#A] - switch to FFTW3f for fft's
*** TODO Spectrum
    - deterministic seems to be handled correctly.. or is it?
    - not stochastic
       - PeakDetection is producing different results
       - so, Spectrum must not be right identical yet
*** DONE start with SineSynthIFFT until it sounds right
**** questions about SineSynthIFFT()
     - [ ] why is nBins set to 8?
            - SincTab is also hardcoded for index = 0:8
     - [ ] why is the real component obtained by Mag * sin(theta)?
            - shouldn't it be cos(theta)?
**** periodic mess-ups in waveform:
      - 9 samples of zero
      - good samples: 44 ?
      - then, discontinuities (+infinite?) :
** TODO [#A] Doxygen documentation
   - at the same time, rename functions to be coherent:
       - structs get SMS_CamelCase
       - functions get sms_camelCase 
       - #defines get SMS_UPPER_CASE
        - ?? should they be enums instead?
** TODO [#B] convert from short to floating point data
   - will need this for pd anyway
   - everything is computed in float point, so why range from 0-16000   then?
   - [X] temp fix by making a const multiplier SHORT_TO_FLOAT
** TODO [#B] make sure pFStocGain is always set
     - zero if no stoc component, 1 if wave, or val if StocSpectrum
** TODO [#C] make example python scripts
** TODO [#C] move smsMod's stochostic gain adjusting to smsSynth
   - should stocGain be available for all stoc types?

** TODO [#C] optimizing
   - [ ] change fabs() to fabsf() if they don't need to be doubles
   - [ ] same with floorf
   - [ ] store magnitudes in RMS instead of db
** DONE [#A] switch build scripts to scons
   - [X] get env. exporting/importing fixed
   - [ ] add install/uninstall functionality
** DONE [#B] convert README's to manpages.
   - [ ] update to fit new parameters
   - [ ] proofread** DONE [#B] update USAGE arguments to tell what different values do
** DONE [#A] should have the option to store residual in audio samples or STFT frames
*** TODO organize analParams to allow for options:
   - [X] sound samples
   - [X] filter approximation
   - [X] no stachostic component
*** TODO reorganization of SmsSynthesis
**** possible types
***** Deterministic only, OSC
***** Deterministic only, IFFT
***** Stoc only, IFFT
***** Stoc only, waveform
***** Stoc only, Approx
***** Deterministic + Stoc, IFFT
***** Deterministic + Stoc, IFFT + Approx
***** Deterministic + Stoc, IFFT + Waveform
***** Deterministic + Stoc, OSC + IFFT
***** Deterministic + Stoc, OSC + Approx
***** Deterministic + Stoc, OSC + Waveform

*** TODO Store Residual as STFT 
    - does imag need to be stored?
       - yes, it is cheaper to store/recall than to make a random one
    - [ ] allocate memory
    - [X] need sizeDFT in SMS_HEADER (i think)
    - should this be 2x hopsize because there is overlap of 50%?
    - [ ] store in stochAnalysis (probably should be somewhere else..)
    - [ ] make sure it is correctly stored in smsToYaml/smsPrint
*** TODO modify smsResample to concatenate stocWave data
    - [ ] will take adding iWaveSamples to SMS_DATA
** DONE [#A] make samplerate independant of analysis/synthesis
*** Investigating samplerate/framerate dependencies:
**** How is resample making the current SMS_DATA frame?

*** In order for real-time synthesis:
**** iLastSample in smsSynth must be replaced with 
        - iNumSamples will be a predefined buffer of samples to synthesis at one time,
          indepenent of synthesis blocksize
* Phase 2: building real-time pd externals for analysis/synthesis
** prototype: [smsSynthFile~]
*** TODO crashes if you open a file when dsp is on
** [smsbuf]
*** TODO [#A] loads an sms file into a buffer
**** a header/data should live 
**** data is an array of sms records
**** what else needs to be buffered?
       - timetags? frametag     
*** TODO [#C] stores the buffer to sms file
** [smsanal]
*** TODO [#A] reads a pd array and analyzes it
*** TODO [#C] resamples the data to be a desired framerate
** [smssynth]
*** TODO [#A] has access to an [smsbuf] by symbol name
*** TODO [#A] synthesizes the [smsbuf]
** [smsedit]
