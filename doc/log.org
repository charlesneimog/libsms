# use emacs org-mode for pretty colors
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
SMS Library Work Log
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
* Present Issues (todonow)
** TODO I don't think bad frames are being re-analyzed
   - ReAnalyzeFrame is returning a -1 when sms_fundDeviation reports
   that the deviations is really off, yet nothing is using this return value
   - there are other return values of -1 as well, none used in sms_analyze
   - [ ] try manually setting the window size to the size that is settled upon
         - smsAnal -d9 reports sizeWindow = 1009 until about .05s of flugel.sms
           then, it switches to 173, which seems to work for the rest of the analysis
         - this is because the default fundamental was not set. When set with -u587 (D5),
           the default window size is correctly around 171.  But still get the crunch!
*** [#B] related to stoc_ big crunch in the beginning?
** TODO what is smsClean doing differently than the cleaning within smsAnal?
** TODO where are inharmonic tracks analyzed/synthesized differently?
** TODO there are many members for SMS_Header not currently used
   - such as descriptors
** TODO make a better random function
   - should return a floating point random number -1. : 1.
   - [ ] try implementing the Merseinne Twister algorithm (~/src/SFMT...)
** TODO find out if there is any benifit to a dynamic library at one point
** plot stochastic coefficients at different rates to see if they are the same for diff sr
** changing the framerate in smsAnal makes deterministic component empty. huh?
*** Xavier suggests fund estimate is bad, so specify manually
*** resample after analysis (delete 3 out of 4 frames)
** what is calcCorr in tools?
* Pre-modifications: making analysis/plotting scripts
** DONE SWIG libsms wrappers for more convenient use in python
** DONE smsPlot.py for plotting smsData over a spectrogram of audio              
** DONE smsToYaml for importing into python
* to clean:
** TODO why is iOriginalSRate necessary in SMS_Header?
   - it seems that if the synthesis is completely independent of 
   analysis, this shouldn't be.
   - [ ] is there a better way to achieve the same thing?
** TODO [#B] research Hybridize functions, organize
*** was previously only used with the MK tool, which isn't available now
** TODO check for memory leaks
   - [X] sine/sinc tables
   - [ ] stuff in SmsInitAnalysis
        - especially ANAL_FRAMES
*** TODO run memory leak detector
** TODO static variables in smsAnalysis
*** isn't a problem if the library is always statically compiled
   - ComputeFrame
   - Spectrum
   - GetResidual
   - static functions in peakDetection.c and peakContinuation.c
** DONE organize files/functions
** DONE update documentation of functions
** DONE append sms_ to functions declared in sms.h
** DONE export functions in smsAnal to library
     - ARGUMENTS will only be for smsAnal, but an initAnalParams
        function is made that does something similar to fillArguments
** DONE make a function for returning a string to the error
   - right now it is necessary to cop/paste a large block of code to do this
   - should replace the 'quit' function, and shouldn't exit by default
** DONE Globals:
*** DONE Tables
    - declare them in sms.h
    - allocate in SmsInit()
*** DONE pFrames/ppFrames
*** DONE FResidualPerc
        - defined in variousFuntions for now, as SmsInit() is always called.
** DONE SmsInit() should be a global init before anything
* Phase 1: Refactoring libsms for usage in real-time and release
** TODO [#A] add function for changing synth hopsize
   - along with it other parameters will change, as well as re-inits
** TODO [#A] Doxygen documentation
   - [ ] go through To-Do list
   - [ ] move main page documentation somewhere other than sms.h
*** things to add to main page
    - [ ] copyright information
    - [ ] info on pd files (reference to readme.txt to install)
    - [ ] info on python
    - [ ] info on tools
    - [ ] info on tests
    - [ ] section on a feature wish-list
** TODO [#A] scons install for pd
** TODO [#C] make example python scripts
** TODO [#C] optimizing
   - [ ] benchmark FFT's
   - [ ] change fabs() to fabsf() if they don't need to be doubles
   - [ ] calloc's/malloc's done per function call
   - check if they are only done once
       - most are in if statements, add an else with a print to check
   - [ ] same with floorf
   - [ ] store magnitudes in RMS instead of db
   - [ ] currently uses random() from stdlib.
          - could there be a better/faster version?
          - should the random number be filtered?
** DONE [#C] make soundfile output format variable
** DONE [#A] convert from short to floating point data
   - will need this for pd anyway
   - everything is computed in float point, so why range from 0-16000   then?
** DONE [#C] move smsMod's stochostic gain adjusting to smsSynth
   - should stocGain be available for all stoc types?
** DONE [#B] make sure pFStocGain is always set
     - zero if no stoc component, 1 if wave, or val if StocSpectrum
** DONE [#A] - switch to FFTW3f for fft's
*** DONE Spectrum
    - deterministic seems to be handled correctly.. or is it?
    - not stochastic
       - PeakDetection is producing different results
       - so, Spectrum must not be right identical yet
*** DONE start with SineSynthIFFT until it sounds right
**** questions about SineSynthIFFT()
     - [ ] why is nBins set to 8?
            - SincTab is also hardcoded for index = 0:8
     - [ ] why is the real component obtained by Mag * sin(theta)?
            - shouldn't it be cos(theta)?
** DONE [#A] switch build scripts to scons
   - [X] get env. exporting/importing fixed
   - [ ] add install/uninstall functionality
** DONE [#B] convert README's to manpages.
   - [ ] update to fit new parameters
   - [ ] proofread** DONE [#B] update USAGE arguments to tell what different values do
** DONE [#A] should have the option to store residual in audio samples or STFT frames
*** TODO organize analParams to allow for options:
   - [X] sound samples
   - [X] filter approximation
   - [X] no stachostic component
*** TODO reorganization of SmsSynthesis
**** possible types
***** Deterministic only, OSC
***** Deterministic only, IFFT
***** Stoc only, IFFT
***** Stoc only, waveform
***** Stoc only, Approx
***** Deterministic + Stoc, IFFT
***** Deterministic + Stoc, IFFT + Approx
***** Deterministic + Stoc, IFFT + Waveform
***** Deterministic + Stoc, OSC + IFFT
***** Deterministic + Stoc, OSC + Approx
***** Deterministic + Stoc, OSC + Waveform

*** TODO Store Residual as STFT 
    - does imag need to be stored?
       - yes, it is cheaper to store/recall than to make a random one
    - [ ] allocate memory
    - [X] need sizeDFT in SMS_HEADER (i think)
    - should this be 2x hopsize because there is overlap of 50%?
    - [ ] store in stochAnalysis (probably should be somewhere else..)
    - [ ] make sure it is correctly stored in smsToYaml/smsPrint
*** TODO modify smsResample to concatenate stocWave data
    - [ ] will take adding iWaveSamples to SMS_DATA
** DONE [#A] make samplerate independant of analysis/synthesis
*** Investigating samplerate/framerate dependencies:
**** How is resample making the current SMS_DATA frame?

*** In order for real-time synthesis:
**** iLastSample in smsSynth must be replaced with 
        - iNumSamples will be a predefined buffer of samples to synthesis at one time,
          indepenent of synthesis blocksize       
* Phase 2: building real-time pd externals for analysis/synthesis
** prototype: [smsSynthFile~]
** [smsbuf]
*** DONE [#A] loads an sms file into a buffer
**** a header/data should live 
**** data is an array of sms records
**** what else needs to be buffered?
       - timetags? frametag     
*** DONE [#C] stores the buffer to sms file
** [smsanal]
*** TODO do analysis in audio chain
    - this should stop the big crunch by slowing the analysis down
*** TODO [#C] resamples the data to be a desired framerate
*** DONE reads a pd array and analyzes it
   - also can analyze from file
*** DONE add analysis parameter classes (lots of them)
** [smssynth]
*** TODO fix functino for changing sizehop
*** TODO re-init the synthesizer when samplerate changes
    - actually, probably is not necessary -- check
*** DONE [#A] has access to an [smsbuf] by symbol name
*** DONE [#A] synthesizes the [smsbuf]
** [smsedit]
*** In order to retain sanity during editing
    - [ ] make a restore frame method
    - [ ] make 'resolve' method
       - averages between old and new some how

