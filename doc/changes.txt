=-=-=-=-=-=-=- libsms change log -=-=-=-=-=-=

=== June 23, 2009 === version 1.1 beta =====================================================

New features:
	- Can now transform sounds using their spectral envelopes. By setting the appropriate
	flags in an SMS_ModifyParams struct and calling sms_modify, it is possible to shape the
	partials of one sound using the spectral envelope of another (or a linear interpolation
	anywhere between their two envelopes), and to transpose sounds while maintaining the
	original spectral envelope. In fact the envelopes do not have to be related to any
	analysed sounds, they could be generated by any means and then applied to the detected
	partials of a given sound, so purely synthetic envelopes could be used as well.
	- The full SMS analysis/synthesis process is now callable from Python, and a Python
	module called SMS.py has been created that will analyze or synthesize a file with a single
	function call. See the demo script python/AnalysisSynthesis.py for an example of using it.

API changes:
	- All transformations (including transpostion and stochastic component scaling) should
	now be performed using the sms_modify function. The required transformations are specified
	by using the SMS_ModifyParams structure. Examples of using this (from Python) can be found
	in the file python/modify_examples.py.

Bug fixes:
	- The stochastic gain calculated during residual analysis was being applied twice during
	resynthesis, fixed this.
	- Also changed residual and spectrum energy calculation in sms_residual so that they use 
	the sum of the square of signal samples rather than just the sum of the samples.
	- Fixed a call to memset is sms_synthesize that was writing more data than intended (writing 
	more than the given array size)
	- made some changes to python/setup.py so that the python module builds on OS X (tested
	on Leopard).

Other:
	- Added some unit tests (in Python) to test/Tests.py

=== Nov. 15, 2008 === version 1.0, first release ============================================

This release represents a revival of the original code from Xavier Serra, which dates back to the early 1990's.
Care has been taken to make sure the functionality of the algorithms important to SMS have not changed,
while still updating function calls to work with modern day platforms.  Future releases will focus more on incorporating
improvements in the SMS model that have since been discovered. Some changes to the original code include:
        - using libsndfile for sound file handling
        - using OOURA fft routines for real-DFT functions (fftw3 as well, but not fully working)
        - optionally can compile to use FFTW3 fft libary, but it is still in a testing stage and fails in pd externals
        - appended the namespaces sms_* and SMS_ to all globally seen functions, structures and defines/enumerations
        - uses scons instead of make, as it is very powerful, being based in python
        - python SWIG wrappers
        - synthesis parameters "stocgain" and "ftranspose" are added to change the current synthesis, but not the data itself
        - smsToYaml - converts a binary *.sms file to YAML text format, which is very easy to read
        - made sms_errorString() for returning strings-to-errors (and not just exiting)
        - made sms_random() to produce random numbers
        - made sms_power2() to garuntee an integer is a power of two
        - no longer uses shorts, everything is floating point (added functions sms_dBToMag and vice-versa for this too)
        - functions sms_initAnalysis and sms_initSynthesis for calling to set up the proper arrays before synthesis
           (was done in the command line programs before)
        - sms_initAnalParams to set basic sane parameters in an SMS_AnalParams struct
        - sms_init() for initializing global arrays (just sine and sinc tables at the moment)
        - soundfile output is variable
        - converted README's to manpages
        - samplerate is independant of analysis/synthesis ( a necessary for pure data)
        - doxygen documentation
        - various minor optimizations, but much more will be done once things are running really smooth
