# -*- python -*-
# SConscript for pd externals - called from main directory with the command "scons pd"

import os

Import('*')

smspd_sources =  Split("""
                                            smspd.c 
                                            smsanal.c 
                                            smssynth~.c
                                            smsedit.c
""" )

help_dir = prefix + '/pd/doc/5.reference'
extra_dir = prefix + '/pd/extra'

prefix = ARGUMENTS.get('pdfolder','/usr/local')

helpfiles = []
helpfiles.append('help/smsbuf-help.pd')
for x in smspd_sources:
    if x == 'smspd.c':
        helpfiles.append('help/sms-help.pd')
    else:
        helpfiles.append('help/' + os.path.splitext(os.path.basename(x))[0] + '-help.pd')

env.Append(CPPDEFINES= 'PD' )

env = env.Clone( SHLIBPREFIX = '')

conf = Configure(env)
if not conf.CheckLibWithHeader('pthread','pthread.h','c'):
    print 'cannot find libpthread'
    Exit(1)
if not conf.CheckCHeader('m_pd.h') or conf.CheckCHeader('include/m_pd.h'):
    print 'cannot find m_pd.h pd header'
    Exit(1)

env = conf.Finish()

print "libraries linking into externals: ", env.Dump('LIBS')

print "compiling for:" , os.name 
if  os.name == 'posix' :
    env = env.Clone( SHLIBSUFFIX = '.pd_linux' ) 
elif os.name == 'mac':
    env = env.Clone( SHLIBSUFFIX = '.pd_darwin' ) 
elif os.name == 'nt':
    env = env.Clone( SHLIBSUFFIX = '.pd_nt' ) 
else:
    print "scons error: only linux, mac, and nt are covered so far"

pdlib = env.LoadableModule( target = "sms", source = smspd_sources)
Depends(pdlib, '../src/libsms.a')
env.Install(extra_dir, pdlib)
env.Alias('install', extra_dir)
env.Install(help_dir, helpfiles)
env.Alias('install', help_dir)
