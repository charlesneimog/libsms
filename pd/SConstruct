# -*- python -*-
# Top-level scons script for libsms and tools

# is there a way to automatically remove the .os object files?

import os

sms_external = 'smsSynthFile~'

debug_mode = ARGUMENTS.get('debug',0 )

if int(debug_mode):
    sms_cflags = '-Wall -g'
else:
    sms_cflags = ' -O2 -funroll-loops -fomit-frame-pointer \
        -Wall -W -Wshadow  \
        -Wno-unused -Wno-parentheses -Wno-switch '
    




sms_srcpath = '../src'

sms_libs =  ['m', 'sndfile', 'sms', 'fftw3f']


env = Environment( ENV = os.environ, CCFLAGS = sms_cflags , CPPPATH = sms_srcpath, CPPDEFINES= 'PD')

env.Append( LIBPATH = sms_srcpath, LIBS = sms_libs )

#env.Clone( SHLIBPREFIX = '')

print "compiling for:" , os.name 
#if  os.name == 'posix' :
#   env.Clone( SHLIBSUFFIX = '.pd_linux' ) 
#elif os.name == 'mac':
#    env.Clone( SHLIBSUFFIX = '.pd_darwin' ) 
#elif os.name == 'nt':
#    env.Clone( SHLIBSUFFIX = '.pd_nt' ) 
#else:
#    print "scons error: only linux, mac, and nt are covered so far"


#env.SharedLibrary( sms_external, sms_external + '.c' , SHLIBSUFFIX='.pd_linux')
env.SharedLibrary( target = 'smsSynthFile~', source = 'smsSynthFile~.c', SHLIBPREFIX = '',  SHLIBSUFFIX = '.pd_linux' )
