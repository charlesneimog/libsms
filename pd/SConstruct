# -*- python -*-
# Top-level scons script for libsms and tools

# is there a way to automatically remove the .os object files? or maybe just move them to another folder

import os

#sms_externals = Split(' smsbuf smsanal smssynth~' )
smspd_sources =  Split(' smspd.c smsanal.c smssynth~.c' )

debug_mode = ARGUMENTS.get('debug',0 )

if int(debug_mode):
    sms_cflags = '-Wall -g'
else:
    sms_cflags = ' -O2 -funroll-loops -fomit-frame-pointer \
        -Wall -W -Wshadow  \
        -Wno-unused -Wno-parentheses -Wno-switch '
    
sms_srcpath = '../src'

sms_libs =  ['m', 'sndfile', 'sms', 'fftw3f']

env = Environment( ENV = os.environ, CCFLAGS = sms_cflags , CPPPATH = sms_srcpath, CPPDEFINES= 'PD')
env.Append( LIBPATH = sms_srcpath, LIBS = sms_libs )
env = env.Clone( SHLIBPREFIX = '')

print "compiling for:" , os.name 
if  os.name == 'posix' :
    env = env.Clone( SHLIBSUFFIX = '.pd_linux' ) 
elif os.name == 'mac':
    env = env.Clone( SHLIBSUFFIX = '.pd_darwin' ) 
elif os.name == 'nt':
    env = env.Clone( SHLIBSUFFIX = '.pd_nt' ) 
else:
    print "scons error: only linux, mac, and nt are covered so far"


#for ext in sms_externals:
#    external = env.LoadableModule( target = ext, source = ext+'.c')
#    Depends(external, '../src/libsms.a')


smspd = env.LoadableModule( target = "smspd", source = smspd_sources)
Depends(smspd, '../src/libsms.a')
