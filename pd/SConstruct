# -*- python -*-
# Top-level scons script for libsms and tools

import os

sources =  Split("""
                                            smspd.c 
                                            smsanal.c 
                                            smssynth~.c
                                            smsedit.c
""" )

debug_mode = ARGUMENTS.get('debug',0 )
prefix = ARGUMENTS.get('prefix','/usr/local/lib')
    
if int(debug_mode):
    sms_cflags = '-Wall -g'
else:
    sms_cflags = ' -O2 -funroll-loops -fomit-frame-pointer \
        -Wall -W -Wshadow  \
        -Wno-unused -Wno-parentheses -Wno-switch '

sms_srcpath = '../src'
help_dir = prefix + '/pd/doc/5.reference/sms'
extra_dir = prefix + '/pd/extra'
sms_libs =  ['m', 'sndfile', 'sms', 'fftw3f', 'pthread']

helpfiles = []
helpfiles.append('help/smsbuf-help.pd')
for x in sources:
    if x == 'smspd.c':
        helpfiles.append('help/sms-help.pd/')
    else:
        helpfiles.append('help/' + os.path.splitext(os.path.basename(x))[0] + '-help.pd')

env = Environment( ENV = os.environ, CCFLAGS = sms_cflags , CPPPATH = sms_srcpath, CPPDEFINES= 'PD')
env.Append( LIBPATH = sms_srcpath, LIBS = sms_libs )
env = env.Clone( SHLIBPREFIX = '')

conf = Configure(env)

if not conf.CheckCHeader('m_pd.h'):
    print 'cannot find pd header m_pd.h'
    Exit(1)

if not conf.CheckLibWithHeader('m','math.h','c'):
        print 'cannot find libmath'
        Exit(1)

env = conf.Finish()

print "compiling for:" , os.name 
if  os.name == 'posix' :
    env = env.Clone( SHLIBSUFFIX = '.pd_linux' ) 
elif os.name == 'mac':
    env = env.Clone( SHLIBSUFFIX = '.pd_darwin' ) 
elif os.name == 'nt':
    env = env.Clone( SHLIBSUFFIX = '.pd_nt' ) 
else:
    print "scons error: only linux, mac, and nt are covered so far"


pdlib = env.LoadableModule( target = "sms", source = sources)
Depends(pdlib, '../src/libsms.a')
env.Install(extra_dir, pdlib)
env.Alias('install', extra_dir)
env.Install(help_dir, helpfiles)
env.Alias('install', help_dir)


